<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Media Processor</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&family=Comic+Neue:wght@400;700&family=Fredoka:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <style>
    :root {
      --primary: #3f51b5;
      --secondary: #f50057;
      --success: #4caf50;
      --dark: #2c3e50;
      --light: #ecf0f1;
      --bg-color: #FFE5B4;
      --card-bg: #ffffff;
      --text-color: #2c3e50;
      --header-gradient-start: #3f51b5;
      --header-gradient-end: #7986cb;
      --card-shadow: rgba(0,0,0,0.08);
      --card-border: rgba(0,0,0,0.08);
      --toggle-bg: #f0f0f0;
      --toggle-active: #3f51b5;
      --toggle-icon: #fafafa;
      --footer-bg: rgba(255, 255, 255, 0.7);
    }

    [data-theme="dark"] {
      --primary: #5c6bc0;
      --secondary: #ff4081;
      --success: #66bb6a;
      --dark: #ecf0f1;
      --light: #2c3e50;
      --bg-color: #222639;
      --card-bg: #2d3142;
      --text-color: #e0e0e0;
      --header-gradient-start: #303f9f;
      --header-gradient-end: #5c6bc0;
      --card-shadow: rgba(0,0,0,0.25);
      --card-border: rgba(255,255,255,0.05);
      --toggle-bg: #333333;
      --toggle-active: #5c6bc0;
      --toggle-icon: #fafafa;
      --footer-bg: rgba(45, 49, 66, 0.7);
      --primary-color: #4793AF;
      --secondary-color: #FFC470;
      --accent-color: #DD5746;
      --dark-accent: #8B322C;
      --bg-color: #1a1a2e;
      --card-header-bg: #4793AF;
      --border-color: #333344;
      --muted-text: #aaaacc;
    }
    
    body {
      font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #f5576c 75%, #4facfe 100%);
      background-size: 400% 400%;
      animation: gradient-shift 15s ease infinite;
      margin: 0;
      padding: 0;
      color: var(--text-color);
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      position: relative;
    }
    
    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                  radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
                  radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.2) 0%, transparent 50%);
      pointer-events: none;
      z-index: -1;
    }
    
    @keyframes gradient-shift {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }
    /* ===== NEW CLEAN GLASSMORPHISM HEADER ===== */
    .header {
      position: sticky;
      top: 0;
      z-index: 1000;
      background: rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(20px) saturate(1.8);
      -webkit-backdrop-filter: blur(20px) saturate(1.8);
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
      box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
      padding: 2rem 1rem;
      margin-bottom: 2rem;
      text-align: center;
      overflow: visible;
    }
    
    [data-theme="dark"] .header {
      background: rgba(0, 0, 0, 0.2);
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
    }
    
    /* Header Title */
    .header-brand {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 1rem;
    }
    
    .header-title {
      font-family: 'Poppins', sans-serif;
      font-size: 2.5rem;
      font-weight: 700;
      color: #ffffff;
      text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      margin: 0;
    }
    
    /* Emojis */
    .header-emojis {
      display: flex;
      gap: 0.5rem;
    }
    
    .header-emoji {
      font-size: 1.8rem;
      animation: float 3s ease-in-out infinite;
      opacity: 1 !important;
    }
    
    .header-emoji:nth-child(1) { animation-delay: 0s; }
    .header-emoji:nth-child(2) { animation-delay: 0.4s; }
    .header-emoji:nth-child(3) { animation-delay: 0.8s; }
    .header-emoji:nth-child(4) { animation-delay: 1.2s; }
    .header-emoji:nth-child(5) { animation-delay: 1.6s; }
    
    @keyframes float {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      50% { transform: translateY(-6px) rotate(5deg); }
    }
    
    /* Typing Subtitle */
    .typing-subtitle {
      font-family: 'Fredoka', 'Comic Neue', cursive;
      font-size: 1.1rem;
      font-weight: 500;
      color: rgba(255, 255, 255, 0.9);
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
      margin: 0;
      min-height: 1.5em;
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
    }
    
    [data-theme="dark"] .typing-subtitle {
      color: #ffd700;
      text-shadow: 0 0 15px rgba(255, 215, 0, 0.6),
                   0 2px 4px rgba(0, 0, 0, 0.8);
      animation: golden-pulse 3s ease-in-out infinite alternate;
    }
    
    @keyframes golden-pulse {
      0% {
        text-shadow: 0 0 15px rgba(255, 215, 0, 0.6),
                     0 2px 4px rgba(0, 0, 0, 0.8);
      }
      100% {
        text-shadow: 0 0 25px rgba(255, 215, 0, 0.9),
                     0 0 35px rgba(255, 215, 0, 0.7),
                     0 2px 4px rgba(0, 0, 0, 0.8);
      }
    }
    
    /* Typing Cursor */
    .typing-cursor {
      display: inline-block;
      background-color: currentColor;
      width: 2px;
      height: 1em;
      margin-left: 3px;
      animation: cursor-blink 1s infinite;
    }
    
    @keyframes cursor-blink {
      0%, 50% { opacity: 1; }
      51%, 100% { opacity: 0; }
    }
    
    [data-theme="dark"] .typing-cursor {
      background-color: #ffd700;
      box-shadow: 0 0 5px rgba(255, 215, 0, 0.5);
    }
    
    /* Clean animations - no conflicts */
    @keyframes smooth-fade {
      0% { opacity: 0; transform: translateY(20px); }
      100% { opacity: 1; transform: translateY(0); }
    }
    
    /* Responsive design for mobile */
    @media (max-width: 768px) {
      .header-brand {
        flex-direction: column;
        gap: 0.5rem;
      }
      .header-title {
        font-size: 2rem;
      }
      .typing-subtitle {
        font-size: 0.9rem;
        padding: 0 1rem;
      }
      .header-emoji {
        font-size: 1.5rem;
      }
    }
    
    [data-theme="dark"] .typing-text {
      color: #ffd700 !important;
      text-shadow: 0 0 8px rgba(255, 215, 0, 0.6),
                   0 2px 4px rgba(0, 0, 0, 0.8) !important;
      opacity: 1 !important;
      font-weight: 600;
      filter: none !important;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      animation: text-glow 3s ease-in-out infinite alternate;
    }
    
    /* Make sure emojis within typing text are visible */
    [data-theme="dark"] .typing-text *,
    [data-theme="dark"] .typing-text {
      color: inherit !important;
      -webkit-text-fill-color: inherit !important;
    }
    
    @keyframes text-glow {
      0% {
        text-shadow: 0 0 8px rgba(255, 215, 0, 0.6),
                     0 2px 4px rgba(0, 0, 0, 0.8);
      }
      100% {
        text-shadow: 0 0 20px rgba(255, 215, 0, 0.9),
                     0 0 30px rgba(255, 215, 0, 0.7),
                     0 2px 4px rgba(0, 0, 0, 0.8);
      }
    }
    
    
    /* Typewriter cursor */
    .typewriter-cursor {
      display: inline-block;
      background-color: #ffffff;
      margin-left: 3px;
      width: 3px;
      animation: blink 1s infinite;
      opacity: 1;
    }
    
    @keyframes blink {
      0%, 50% { opacity: 1; }
      51%, 100% { opacity: 0; }
    }
    
    .typing-text::after {
      content: "";
      position: absolute;
      right: -5px;
      top: 0;
      height: 100%;
      width: 3px;
      background-color: #ffffff;
      animation: blink-cursor 0.8s step-end infinite;
    }
    
    @keyframes blink-cursor {
      from, to { background-color: transparent }
      50% { background-color: #ffffff; }
    }
    
    /* Text animation fade effect */
    /* Ensure emojis are always visible */
    .header-emoji {
      color: initial !important;
      -webkit-text-fill-color: initial !important;
      filter: none !important;
      opacity: 1 !important;
    }
    
    /* Left to right slide animation */
    @keyframes slide-in {
      0% { transform: translateX(-20px); opacity: 0; }
      100% { transform: translateX(0); opacity: 1; }
    }
    
    /* Dark mode emoji visibility */
    [data-theme="dark"] .header-emoji {
      color: initial !important;
      -webkit-text-fill-color: initial !important;
      filter: none !important;
      opacity: 1 !important;
    }
    
    /* Light mode emoji visibility */
    [data-theme="light"] .header-emoji,
    html:not([data-theme="dark"]) .header-emoji {
      color: initial !important;
      -webkit-text-fill-color: initial !important;
      filter: none !important;
      opacity: 1 !important;
    }
    
    /* Make emojis more visible in both modes */
    [data-theme="dark"] .emoji-bounce {
      filter: none !important;
      opacity: 1 !important;
      text-shadow: none !important;
      color: initial !important;
      -webkit-text-fill-color: initial !important;
      background: rgba(255, 255, 255, 0.15) !important;
    }

    /* Light mode emoji visibility enhancement */
    [data-theme="light"] .emoji-bounce, 
    html:not([data-theme="dark"]) .emoji-bounce {
      filter: none !important;
      opacity: 1 !important;
      color: initial !important;
      -webkit-text-fill-color: initial !important;
    }
    
    /* Glassmorphism container styling */
    .glassmorphism-container {
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 2rem;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      position: relative;
      overflow: hidden;
    }
    
    .glassmorphism-container::before {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      background: linear-gradient(45deg, 
        rgba(255, 255, 255, 0.1) 0%,
        rgba(255, 255, 255, 0.05) 25%,
        rgba(255, 255, 255, 0.1) 50%,
        rgba(255, 255, 255, 0.05) 75%,
        rgba(255, 255, 255, 0.1) 100%);
      border-radius: 22px;
      z-index: -1;
      animation: border-glow 4s ease-in-out infinite;
    }
    
    @keyframes border-glow {
      0%, 100% { opacity: 0.5; }
      50% { opacity: 1; }
    }
    
    [data-theme="dark"] .glassmorphism-container {
      background: rgba(0, 0, 0, 0.2);
      border: 1px solid rgba(255, 255, 255, 0.1);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    }
    
    [data-theme="dark"] .glassmorphism-container::before {
      background: linear-gradient(45deg, 
        rgba(124, 58, 237, 0.2) 0%,
        rgba(139, 92, 246, 0.1) 25%,
        rgba(168, 85, 247, 0.2) 50%,
        rgba(139, 92, 246, 0.1) 75%,
        rgba(124, 58, 237, 0.2) 100%);
    }
      text-shadow: 0 0 10px rgba(255,255,255,0.3);
    }
    
    /* Scrollable file history table */
    .file-history-container {
      height: 330px; /* Fixed height to show approximately 6 rows */
      overflow-y: auto;
      border-radius: 10px;
      scrollbar-width: thin;
      scrollbar-color: var(--primary) transparent;
      scroll-behavior: smooth;
      padding-right: 2px;
    }
    
    /* Customize scrollbar */
    .file-history-container::-webkit-scrollbar {
      width: 8px;
    }
    
    .file-history-container::-webkit-scrollbar-track {
      background: rgba(0,0,0,0.05);
      border-radius: 10px;
      margin: 5px 0;
    }
    
    .file-history-container::-webkit-scrollbar-thumb {
      background: var(--primary);
      border-radius: 10px;
      border: 2px solid transparent;
      background-clip: padding-box;
    }
    
    .file-history-container::-webkit-scrollbar-thumb:hover {
      background: var(--secondary);
      border: 2px solid transparent;
      background-clip: padding-box;
    }
    
    [data-theme="dark"] .file-history-container::-webkit-scrollbar-track {
      background: rgba(255,255,255,0.05);
    }
    
    [data-theme="dark"] .file-history-container::-webkit-scrollbar-thumb {
      background: rgba(92, 107, 192, 0.8);
    }
    
    [data-theme="dark"] .file-history-container::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 64, 129, 0.8);
    }
    
    /* Make table header sticky in the scrollable container */
    .file-history-container thead th {
      position: sticky;
      top: 0;
      background: var(--card-bg);
      z-index: 1;
    }
    
    [data-theme="dark"] .file-history-container thead th {
      background: var(--table-header-bg, #23263a);
    }
    .card {
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      margin-bottom: 20px;
      transition: all 0.3s ease;
      background-color: var(--card-bg);
      color: var(--text-color);
    }
    .footer {
      margin-top: auto;
      padding: 1.5rem 0;
      background: rgba(255, 255, 255, 0.2) !important;
      backdrop-filter: blur(20px) saturate(180%) !important;
      -webkit-backdrop-filter: blur(20px) saturate(180%) !important;
      border-top: 1px solid rgba(255, 255, 255, 0.3) !important;
      border-radius: 20px 20px 0 0 !important;
      box-shadow: 0 -8px 32px rgba(0, 0, 0, 0.2),
                  inset 0 1px 0 rgba(255, 255, 255, 0.4) !important;
      position: relative;
      overflow: hidden;
    }
    
    .footer::before {
      content: '';
      position: absolute;
      top: 0;
      left: -50%;
      width: 200%;
      height: 100%;
      background: linear-gradient(45deg, 
        transparent 30%, 
        rgba(255, 255, 255, 0.1) 50%, 
        transparent 70%);
      animation: footer-shimmer 5s infinite;
      pointer-events: none;
    }
    
    @keyframes footer-shimmer {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(100%); }
    }
    .heart-beat {
      display: inline-block;
      color: #ff4081;
      animation: heartBeat 1.5s infinite;
    }
    @keyframes heartBeat {
      0% { transform: scale(1); }
      14% { transform: scale(1.3); }
      28% { transform: scale(1); }
      42% { transform: scale(1.3); }
      70% { transform: scale(1); }
    }
    .emoji-rotate {
      display: inline-block;
      animation: rotate 3s infinite linear;
    }
    @keyframes rotate {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
    }
    .toast {
      min-width: 250px;
    }
    .diagnostic-result {
      background-color: rgba(0,0,0,0.05);
      border-radius: 8px;
      padding: 15px;
      margin-top: 15px;
      max-height: 300px;
      overflow-y: auto;
    }
    .test-result {
      padding: 10px;
      margin-bottom: 10px;
      border-radius: 5px;
    }
    .test-success {
      background-color: rgba(0, 200, 83, 0.1);
      border-left: 4px solid #00c853;
    }
    .test-failure {
      background-color: rgba(255, 82, 82, 0.1);
      border-left: 4px solid #ff5252;
    }
    /* File history table header styling */
    .file-history-header th {
      background: linear-gradient(135deg, #4793AF, #F0B86A) !important;
      color: white !important;
      font-weight: 600 !important;
      padding: 0.75rem !important;
      border: none !important;
      text-align: center !important;
      position: sticky !important;
      top: 0 !important;
      z-index: 10 !important;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
    }
    
    [data-theme="dark"] .file-history-header th {
      background: linear-gradient(135deg, #3a6b7c, #d4975a) !important;
      color: white !important;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3) !important;
    }
    
    /* --- Custom dark mode table and footer enhancements --- */
    [data-theme="dark"] .table {
      background-color: var(--card-bg) !important;
      color: var(--text-color) !important;
    }
    [data-theme="dark"] thead th {
      background: var(--table-header-bg, #23263a) !important;
      color: var(--table-header-text, #fafafa) !important;
      border-bottom: 2px solid var(--table-border, #44495e) !important;
    }
    [data-theme="dark"] tbody tr {
      background-color: var(--table-row-bg, #2d3142) !important;
      border-bottom: 1px solid var(--table-border, #44495e) !important;
    }
    [data-theme="dark"] .footer {
      background: rgba(0, 0, 0, 0.4) !important;
      border-top: 1px solid rgba(255, 255, 255, 0.1) !important;
      box-shadow: 0 -8px 32px rgba(0, 0, 0, 0.4),
                  inset 0 1px 0 rgba(255, 255, 255, 0.1) !important;
      color: rgba(255, 255, 255, 0.9) !important;
    }
    .dark-mode {
      background-color: #181a1b;
      color: #e8e6e3;
    }
    .navbar {
      background-color: #3f51b5 !important;
    }
    .dark-mode .navbar {
      background-color: #2c387e !important;
    }
    .dark-mode .card {
      background-color: #252a2e;
      color: #e8e6e3;
      border-color: #2d3133;
    }
    .dark-mode .card-header {
      background-color: #2d3133;
      border-color: #2d3133;
    }
    .dark-mode .table {
      color: #e8e6e3;
    }
    .dark-mode .table-striped tbody tr:nth-of-type(odd) {
      background-color: rgba(255, 255, 255, 0.1) !important; /* Slightly brighter background */
    }
    .dark-mode .table-striped tbody tr:nth-of-type(even) {
      background-color: rgba(255, 255, 255, 0.02) !important; /* Very subtle background */
    }
    .dark-mode .table tbody tr td {
      color: rgba(255, 255, 255, 0.9) !important; /* Brighter text */
    }
    .dark-mode .text-center {
      color: #e8e6e3;
    }
    /* Fix for "No files processed yet" message in dark mode */
    .dark-mode .table tbody .text-center {
      color: #ffffff !important; /* Higher contrast white */
      font-weight: 500; /* Semi-bold for better visibility */
    }
    .btn-primary {
      background-color: #3f51b5;
      border-color: #3f51b5;
    }
    .btn-primary:hover {
      background-color: #303f9f;
      border-color: #303f9f;
    }
    .icon-container {
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: #e0e0e0;
      color: #3f51b5;
      border-radius: 50%;
      margin-right: 15px;
    }
    .dark-mode .icon-container {
      background-color: #3a3f44;
      color: #b3e5fc;
    }
    .dark-mode .test-success {
      background-color: rgba(0, 200, 83, 0.2);
    }
    .dark-mode .test-failure {
      background-color: rgba(255, 82, 82, 0.2);
    }
    #service-status {
      position: relative;
      padding-left: 20px;
    }
    .status-indicator {
      position: absolute;
      top: 15px;
      right: 15px;
      width: 15px;
      height: 15px;
      border-radius: 50%;
      box-shadow: 0 0 10px 2px currentColor;
    }
    .status-indicator.success {
      background-color: #32CD32;
      color: #32CD32;
    }
    .status-indicator.warning {
      background-color: #FFA500;
      color: #FFA500;
    }
    .status-indicator.failure {
      background-color: #FF4500;
      color: #FF4500;
    }
    .status-active {
      background-color: #00c853;
      box-shadow: 0 0 10px #00c853;
      animation: pulse 1.5s infinite;
    }
    .status-inactive {
      background-color: #ff5252;
    }
    @keyframes pulse {
      0% {
        opacity: 0.5;
        transform: scale(0.8);
      }
      50% {
        opacity: 1;
        transform: scale(1.2);
      }
      100% {
        opacity: 0.5;
        transform: scale(0.8);
      }
    }
    .logs pre {
      background-color: #f5f5f5;
      padding: 10px;
      border-radius: 5px;
      font-size: 0.85rem;
      height: 400px;
      overflow-y: auto;
    }
    .dark-mode .logs pre {
      background-color: #1e2226;
      color: #e8e6e3;
      border: 1px solid #2d3133;
    }
    /* Sortable table styles */
    .sortable {
      cursor: pointer;
      position: relative;
    }
    
    .sortable:hover {
      background-color: rgba(0,0,0,0.05);
    }
    
    [data-theme="dark"] .sortable:hover {
      background-color: rgba(255,255,255,0.05);
    }
    
    .sortable i.fa-sort {
      margin-left: 5px;
      opacity: 0.5;
      font-size: 0.8em;
    }
    
    .sortable i.fa-sort-up, .sortable i.fa-sort-down {
      margin-left: 5px;
      opacity: 1;
      font-size: 0.8em;
    }
    
    /* Enhanced file history styles */
    .file-type-emoji {
      margin-right: 5px;
    }
    
    .language-icon {
      display: inline-block;
      width: 24px;
      height: 24px;
      text-align: center;
      border-radius: 50%;
      margin-right: 5px;
      color: white;
      font-weight: bold;
      line-height: 24px;
      font-size: 12px;
    }
    
    .language-mal {
      background-color: #ff4081;
    }
    
    .language-eng {
      background-color: #3f51b5;
    }
    
    .language-other {
      background-color: #4caf50;
    }
    /* Interactive button styles */
    .btn {
      transition: all 0.3s ease;
    }
    
    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .btn:active {
      transform: translateY(1px);
    }
    
    .btn-primary:hover {
      background-color: #303f9f;
      border-color: #1a237e;
    }
    
    .btn-success:hover {
      background-color: #2e7d32;
      border-color: #1b5e20;
    }
    
    .btn-danger:hover {
      background-color: #c62828;
      border-color: #b71c1c;
    }
    
    .btn-warning:hover {
      background-color: #f57c00;
      border-color: #ef6c00;
    }
    
    /* Unified toggle button */
    .toggle-btn {
      min-width: 100px;
      position: relative;
      overflow: hidden;
    }
    
    .toggle-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: all 0.6s ease;
    }
    
    .toggle-btn:hover::before {
      left: 100%;
    }
    /* Locked fields style */
    .locked-field {
      background-color: rgba(0, 0, 0, 0.05);
      cursor: not-allowed;
      border-color: transparent;
      color: var(--text-color);
    }
    
    [data-theme="dark"] .locked-field {
      background-color: rgba(255, 255, 255, 0.05);
      color: var(--text-color);
    }
    
    /* Edit button styles */
    .edit-btn {
      position: absolute;
      right: 20px;
      top: 15px;
      transition: all 0.3s ease;
      opacity: 0.7;
      z-index: 5;
    }
    
    .edit-btn:hover {
      transform: scale(1.1);
      opacity: 1;
    }
    
    /* Panel with edit mode */
    .editable-panel {
      position: relative;
      transition: all 0.3s ease;
    }
    
    .editable-panel:hover {
      box-shadow: 0 0 15px rgba(63, 81, 181, 0.15);
    }
    
    [data-theme="dark"] .editable-panel:hover {
      box-shadow: 0 0 15px rgba(92, 107, 192, 0.25);
    }
    
    .editable-panel.edit-mode {
      border: 1px solid var(--primary);
      box-shadow: 0 0 10px rgba(63, 81, 181, 0.2);
    }
    
    [data-theme="dark"] .editable-panel.edit-mode {
      border: 1px solid var(--primary);
      box-shadow: 0 0 10px rgba(92, 107, 192, 0.3);
    }
    
    /* Editing actions */
    .editing-actions {
      display: none;
      margin-top: 20px;
      text-align: right;
    }
    
    .editing-actions.active {
      display: block;
      animation: fadeIn 0.3s ease;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    /* Label icon */
    .form-label .label-icon {
      margin-right: 5px;
      opacity: 0.8;
    }
    /* Stats cards with hover effects */
    .stats-card {
      transition: all 0.3s ease;
      transform: translateY(0);
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 4px 6px rgba(0,0,0,0.08);
    }
    
    .stats-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0,0,0,0.12);
    }
    
    .stats-card .card-icon {
      transition: all 0.4s ease;
    }
    
    .stats-card:hover .card-icon {
      transform: scale(1.2);
    }
    
    .stats-card .stats-count {
      font-size: 2.2rem;
      font-weight: 700;
      transition: all 0.3s ease;
    }
    
    .stats-card:hover .stats-count {
      color: var(--primary);
      transform: scale(1.1);
    }
    
    /* File history hover effects */
    .file-history-container {
      transition: all 0.3s ease;
    }
    
    .file-history-card {
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }
    
    .file-history-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 7px 14px rgba(0,0,0,0.1);
    }
    
    .file-history-card:hover::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      height: 100%;
      width: 3px;
      background: var(--primary);
    }
    
    .file-history-title {
      display: flex;
      align-items: center;
      gap: 8px;
      transition: all 0.3s ease;
    }
    
    .file-history-title:hover {
      transform: translateX(5px);
    }
    
    /* Edit button positioning and lock icon */
    .panel-edit-btn {
      position: absolute;
      right: 15px;
      top: 10px;
      transition: all 0.3s ease;
      z-index: 10;
      display: flex;
      align-items: center;
      gap: 5px;
      border-radius: 6px;
      padding: 6px 12px;
      background-color: var(--primary);
      color: white;
      opacity: 0.9;
    }
    
    .panel-edit-btn:hover {
      opacity: 1;
      transform: translateY(-2px);
      box-shadow: 0 3px 8px rgba(0,0,0,0.15);
    }
    
    .panel-edit-btn.editing {
      background-color: var(--secondary);
    }
    
    .panel-edit-btn .lock-icon {
      transition: all 0.3s ease;
    }
    
    .edit-mode .panel-edit-btn .lock-icon {
      transform: rotate(90deg);
    }

    .diagnostics-indicator {
      display: none;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background-color: #4caf50;
      position: absolute;
      top: 8px;
      left: 10px;
      animation: pulse-green 1.5s infinite;
    }

    .diagnostics-running .diagnostics-indicator {
      display: block;
    }

    @keyframes pulse-green {
      0% {
        transform: scale(0.95);
        box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7);
      }
      
      70% {
        transform: scale(1);
        box-shadow: 0 0 0 10px rgba(76, 175, 80, 0);
      }
      
      100% {
        transform: scale(0.95);
        box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);
      }
    }

    .diagnostics-results {
      display: none;
      margin-top: 20px;
      animation: fade-in 0.5s ease-in-out;
    }

    .diagnostics-results.show {
      display: block;
    }

    .diagnostic-metric {
      background-color: #fff;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      margin: 15px;
      transition: all 0.3s ease;
      min-height: 220px;
      position: relative;
      display: flex;
      flex-direction: column;
    }

    .diagnostic-metric:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
    }

    .diagnostic-metric h3 {
      margin-top: 0;
      margin-bottom: 15px;
      color: #444;
      font-size: 1.2rem;
      font-weight: 600;
      padding-left: 22px;
      position: relative;
    }

    .status-indicator {
      position: absolute;
      top: 24px;
      left: 20px;
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }

    .status-indicator.success {
      background-color: #4CAF50;
      box-shadow: 0 0 10px rgba(76, 175, 80, 0.6);
    }

    .status-indicator.warning {
      background-color: #FFC107;
      box-shadow: 0 0 10px rgba(255, 193, 7, 0.6);
    }

    .status-indicator.failure {
      background-color: #F44336;
      box-shadow: 0 0 10px rgba(244, 67, 54, 0.6);
    }

    .dark-mode .diagnostic-metric {
      background-color: #2a2a2a;
      border: 1px solid #444;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    .dark-mode .diagnostic-metric h3 {
      border: 1px solid rgba(80, 80, 100, 0.3);
      text-align: center;
      min-height: 150px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      overflow: hidden;
      animation: slideIn 0.4s ease-out forwards;
      opacity: 0;
      transform: translateY(20px);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .diagnostic-metric:hover {
      transform: translateY(-5px);
      box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);
    }

    /* Elegant gold border */
    .diagnostic-metric::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      border: 1px solid #F0B86A;
      border-radius: 12px;
      opacity: 0.5;
      pointer-events: none;
    }

    /* Centered icon */
    .metric-icon {
      font-size: 2.5rem;
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 70px;
      height: 70px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.1);
      transition: all 0.3s ease;
    }

    .metric-icon i {
      background: linear-gradient(45deg, #4793AF, #F0B86A);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
      color: transparent;
      font-size: 2.2rem;
    }

    [data-theme="dark"] .metric-icon i {
      background: linear-gradient(45deg, #5DAFCC, #F5C982);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
      color: transparent;
    }

    .diagnostic-metric:hover .metric-icon {
      transform: scale(1.1);
    }

    .metric-content {
      width: 100%;
      z-index: 2;
    }

    .metric-name {
      font-weight: 600;
      margin-bottom: 8px;
      color: #fff;
      font-size: 14px;
      text-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
    }

    .metric-value {
      font-size: 1.4rem;
      font-weight: 700;
      margin-bottom: 0.25rem;
      background: linear-gradient(45deg, #4793AF, #F0B86A);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
      color: transparent;
    }

    .diagnostics-subtext {
      font-size: 11px;
      color: rgba(255, 255, 255, 0.6);
      max-width: 100%;
    }

    /* Enhanced status indicator */
    .status-indicator {
      position: absolute;
      top: 15px;
      right: 15px;
      width: 14px;
      height: 14px;
      border-radius: 50%;
      z-index: 3;
    }

    .status-good {
      background: #4CFB5C;
      box-shadow: 0 0 8px #4CFB5C, 0 0 12px #4CFB5C;
      animation: pulse-neon 1.5s infinite;
    }

    .status-warning {
      background: #F0B86A;
      box-shadow: 0 0 8px #F0B86A, 0 0 12px #F0B86A;
      animation: pulse-warning 1.5s infinite;
    }

    .status-error {
      background: #FF4D4D;
      box-shadow: 0 0 8px #FF4D4D, 0 0 12px #FF4D4D;
      animation: pulse-error 1.5s infinite;
    }

    @keyframes pulse-neon {
      0% { transform: scale(0.8); box-shadow: 0 0 8px #4CFB5C, 0 0 12px #4CFB5C; }
      50% { transform: scale(1.2); box-shadow: 0 0 10px #4CFB5C, 0 0 18px #4CFB5C, 0 0 24px #4CFB5C; }
      100% { transform: scale(0.8); box-shadow: 0 0 8px #4CFB5C, 0 0 12px #4CFB5C; }
    }

    @keyframes pulse-warning {
      0% { transform: scale(0.8); box-shadow: 0 0 8px #F0B86A, 0 0 12px #F0B86A; }
      50% { transform: scale(1.2); box-shadow: 0 0 10px #F0B86A, 0 0 18px #F0B86A, 0 0 24px #F0B86A; }
      100% { transform: scale(0.8); box-shadow: 0 0 8px #F0B86A, 0 0 12px #F0B86A; }
    }

    @keyframes pulse-error {
      0% { transform: scale(0.8); box-shadow: 0 0 8px #FF4D4D, 0 0 12px #FF4D4D; }
      50% { transform: scale(1.2); box-shadow: 0 0 10px #FF4D4D, 0 0 18px #FF4D4D, 0 0 24px #FF4D4D; }
      100% { transform: scale(0.8); box-shadow: 0 0 8px #FF4D4D, 0 0 12px #FF4D4D; }
    }

    /* Improved grid layout with more spacing */
    #diagnostics-metrics {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 20px;
      margin-top: 25px;
      margin-bottom: 25px;
      padding: 0 10px;
    }

    /* Update run diagnostics button */
    #run-diagnostics-btn {
      background: linear-gradient(45deg, #4793AF, #F0B86A);
      border: none;
      color: white;
      padding: 10px 20px;
      border-radius: 8px;
      font-weight: 600;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    #run-diagnostics-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
    }

    #run-diagnostics-btn::after {
      content: "";
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(transparent, rgba(255, 255, 255, 0.1), transparent);
      transform: rotate(30deg);
      animation: shine 3s infinite linear;
    }

    @keyframes shine {
      0% { transform: translateX(-100%) rotate(30deg); }
      100% { transform: translateX(100%) rotate(30deg); }
    }

    /* Responsive adjustments */
    @media (max-width: 992px) {
      #diagnostics-metrics {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    @media (max-width: 576px) {
      #diagnostics-metrics {
        grid-template-columns: 1fr;
      }
    }

    /* Dark mode enhancements */
    [data-theme="dark"] .diagnostic-metric {
      background: linear-gradient(135deg, rgba(25, 25, 35, 0.8), rgba(35, 35, 50, 0.8));
    }
    
    /* Fix dark mode visibility for file display */
    [data-theme="dark"] .file-path small {
      color: rgba(255, 255, 255, 0.8) !important;
    }
    
    [data-theme="dark"] .file-status-icon {
      filter: brightness(1.3) contrast(1.2);
    }
    
    [data-theme="dark"] .file-badge.bg-success {
      background: linear-gradient(135deg, #4CAF50, #45a049) !important;
      color: white !important;
      border: 1px solid rgba(255, 255, 255, 0.2);
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    }

    /* Better positioning for the icon and value in the cards */
    .diagnostic-metric i {
      font-size: 2.2rem;
      margin-bottom: 12px;
      color: var(--accent-color);
    }

    .diagnostic-metric .metric-value {
      font-size: 1.6rem;
      font-weight: 600;
      margin: 8px 0;
      color: #fff;
      text-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
    }

    .diagnostic-metric .metric-label {
      font-size: 1rem;
      font-weight: 500;
      margin-bottom: 5px;
      color: rgba(255, 255, 255, 0.8);
    }

    .diagnostic-metric .metric-description {
      font-size: 0.85rem;
      color: rgba(255, 255, 255, 0.6);
      margin-top: 8px;
    }

    .diagnostic-metric h3 {
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 12px;
      color: var(--text-color);
      letter-spacing: 0.5px;
    }

    .diagnostic-metric p {
      font-size: 1rem;
      line-height: 1.5;
      margin-bottom: 8px;
      color: var(--secondary-text-color);
    }

    .diagnostic-metric .metric-value {
      font-size: 1.1rem;
      font-weight: 500;
      margin-top: 8px;
      color: var(--accent-color);
    }

    .diagnostic-metric .metric-subtext {
      font-size: 0.9rem;
      opacity: 0.8;
      margin-top: 4px;
    }

    /* Diagnostic metrics container */
    .diagnostic-metrics-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 20px;
      margin-top: 25px;
      margin-bottom: 25px;
      padding: 0 10px;
    }

    /* Diagnostic metric card */
    .diagnostic-metric {
      background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.05));
      border-radius: 12px;
      padding: 20px;
      position: relative;
      overflow: hidden;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
      display: flex;
      flex-direction: column;
      align-items: center;
      animation: fadeInUp 0.6s ease-out forwards;
      opacity: 0;
      transform: translateY(20px);
    }

    .diagnostic-metric:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    @keyframes fadeInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Status indicators with neon effect */
    .status-indicator {
      position: absolute;
      top: 15px;
      right: 15px;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      z-index: 1;
    }

    .status-good {
      background-color: #4caf50;
      box-shadow: 0 0 10px #4caf50, 0 0 20px #4caf50;
      animation: pulse-good 2s infinite;
    }

    .status-warning {
      background-color: #ff9800;
      box-shadow: 0 0 10px #ff9800, 0 0 20px #ff9800;
      animation: pulse-warning 2s infinite;
    }

    .status-error {
      background-color: #f44336;
      box-shadow: 0 0 10px #f44336, 0 0 20px #f44336;
      animation: pulse-error 2s infinite;
    }

    @keyframes pulse-good {
      0% {
        box-shadow: 0 0 5px #4caf50, 0 0 10px #4caf50;
      }
      50% {
        box-shadow: 0 0 10px #4caf50, 0 0 20px #4caf50;
      }
      100% {
        box-shadow: 0 0 5px #4caf50, 0 0 10px #4caf50;
      }
    }

    @keyframes pulse-warning {
      0% {
        box-shadow: 0 0 5px #ff9800, 0 0 10px #ff9800;
      }
      50% {
        box-shadow: 0 0 10px #ff9800, 0 0 20px #ff9800;
      }
      100% {
        box-shadow: 0 0 5px #ff9800, 0 0 10px #ff9800;
      }
    }

    @keyframes pulse-error {
      0% {
        box-shadow: 0 0 5px #f44336, 0 0 10px #f44336;
      }
      50% {
        box-shadow: 0 0 10px #f44336, 0 0 20px #f44336;
      }
      100% {
        box-shadow: 0 0 5px #f44336, 0 0 10px #f44336;
      }
    }

    /* Metric content styling */
    .metric-icon {
      font-size: 2.5rem;
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 70px;
      height: 70px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.1);
      transition: all 0.3s ease;
    }

    .diagnostic-metric:hover .metric-icon {
      transform: scale(1.1);
    }

    .metric-content {
      text-align: center;
      width: 100%;
    }

    .metric-name {
      font-size: 1.1rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
      color: var(--text-color);
    }

    .metric-value {
      font-size: 1.4rem;
      font-weight: 700;
      margin-bottom: 0.25rem;
      background: linear-gradient(45deg, #4793AF, #F0B86A);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
      color: transparent;
    }

    .diagnostics-subtext {
      font-size: 0.85rem;
      opacity: 0.75;
      margin-top: 0.25rem;
    }

    /* Dark mode enhancements */
    [data-theme="dark"] .diagnostic-metric {
      background: linear-gradient(135deg, rgba(30, 30, 40, 0.8), rgba(20, 20, 30, 0.8));
      border: 1px solid rgba(255, 255, 255, 0.05);
    }

    [data-theme="dark"] .metric-icon {
      background: rgba(255, 255, 255, 0.05);
      color: rgba(255, 255, 255, 0.9);
    }

    [data-theme="dark"] .metric-name {
      color: rgba(255, 255, 255, 0.9);
    }

    /* Run diagnostics button styling */
    #run-diagnostics-btn {
      position: relative;
      background: linear-gradient(45deg, #4793AF, #F0B86A);
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 8px;
      font-weight: 600;
      overflow: hidden;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    #run-diagnostics-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.25);
    }

    #run-diagnostics-btn::after {
      content: "";
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(transparent, rgba(255, 255, 255, 0.1), transparent);
      transform: rotate(30deg);
      animation: btn-shine 3s infinite linear;
    }

    @keyframes btn-shine {
      0% { transform: translateX(-100%) rotate(30deg); }
      100% { transform: translateX(100%) rotate(30deg); }
    }

    #run-diagnostics-btn.diagnostics-running {
      pointer-events: none;
      opacity: 0.8;
    }

    /* Responsive adjustments */
    @media (max-width: 992px) {
      #diagnostics-metrics {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    @media (max-width: 576px) {
      #diagnostics-metrics {
        grid-template-columns: 1fr;
      }
    }

    /* Diagnostics tab enhancements */
    .card-header.bg-gradient-primary {
      background: linear-gradient(135deg, #4793AF, #F0B86A);
      color: white;
      border-bottom: none;
      padding: 15px 20px;
      border-radius: 10px 10px 0 0;
    }

    [data-theme="dark"] .card-header.bg-gradient-primary {
      background: linear-gradient(135deg, #304b57, #956f41);
    }

    /* Terminal style logs */
    .terminal-logs {
      background-color: #121216;
      color: #e0e0e0;
      font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
      padding: 8px 15px;
      border-radius: 0 0 5px 5px;
      height: 400px;
      overflow-y: auto;
      white-space: pre-wrap;
      font-size: 0.85rem;
      line-height: 1.2;
      scrollbar-width: thin;
      scrollbar-color: #444 #111;
    }

    .terminal-logs::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }

    .terminal-logs::-webkit-scrollbar-track {
      background: #111;
    }

    .terminal-logs::-webkit-scrollbar-thumb {
      background-color: #444;
      border-radius: 4px;
    }

    .terminal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: linear-gradient(to bottom, #383838, #2a2a2a);
      padding: 10px 15px;
      border-radius: 5px 5px 0 0;
      border-bottom: 1px solid #444;
    }

    .terminal-title {
      display: flex;
      align-items: center;
      color: #ddd;
      font-weight: 600;
    }

    .terminal-title i {
      margin-right: 8px;
      color: #aaa;
    }

    .log-line {
      padding: 2px 0;
      margin: 0;
      border-bottom: 1px solid rgba(255, 255, 255, 0.05);
      display: flex;
      align-items: flex-start;
    }

    .log-timestamp {
      color: #6c8eb0;
      padding-right: 8px;
      font-weight: 500;
      display: inline-block;
      min-width: 90px;
    }

    .log-content {
      color: #e0e0e0;
      display: inline;
      margin-left: 2px;
    }

    /* Dark mode specific adjustment */
    [data-theme="dark"] .terminal-logs {
      background-color: #0a0a10;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.5) inset;
      border: 1px solid rgba(255, 255, 255, 0.05);
    }

    /* Enhanced File History Styles */
    .file-history-container {
      max-height: 400px;
      overflow-y: auto;
      scrollbar-width: thin;
      margin-top: 1rem;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    .file-history-table {
      margin-bottom: 0 !important;
      font-size: 0.9rem;
    }
    
    .file-history-row {
      transition: all 0.2s ease;
      cursor: default;
    }
    
    .file-history-row:hover {
      background-color: rgba(0, 123, 255, 0.1) !important;
      transform: translateY(-2px);
    }
    
    .file-history-cell {
      vertical-align: middle !important;
      padding: 0.5rem 0.75rem !important;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .file-name-cell {
      max-width: 300px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    
    .file-icon {
      margin-right: 8px;
      font-size: 1.1rem;
    }
    
    .file-badge {
      padding: 0.25rem 0.5rem;
      border-radius: 50px;
      font-size: 0.75rem;
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .file-date {
      font-size: 0.75rem;
      opacity: 0.7;
    }
    
    /* Enhanced file display with emojis and animations */
    .file-name-display {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .file-icon-group {
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }
    
    .file-type-icon, .file-lang-icon, .file-status-icon {
      font-size: 1.1rem;
      transition: transform 0.2s ease;
    }
    
    .file-history-row:hover .file-type-icon {
      transform: scale(1.2) rotate(5deg);
    }
    
    .file-history-row:hover .file-lang-icon {
      transform: scale(1.1) rotate(-3deg);
    }
    
    .file-history-row:hover .file-status-icon {
      transform: scale(1.15);
      animation: pulse 1s infinite;
    }
    
    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.7; }
      100% { opacity: 1; }
    }
    
    .file-display-name {
      font-weight: 500;
      color: var(--text-color);
      flex: 1;
      min-width: 0;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    
    .file-size-info {
      font-size: 0.8rem;
      color: var(--muted-text, #888);
      font-weight: 600;
      background: rgba(0, 123, 255, 0.1);
      padding: 0.2rem 0.4rem;
      border-radius: 12px;
      white-space: nowrap;
    }
    
    .file-path {
      max-width: 350px;
      min-width: 300px;
    }
    
    .file-path small {
      display: block;
      overflow-x: auto;
      overflow-y: hidden;
      white-space: nowrap;
      cursor: pointer;
      transition: all 0.3s ease;
      padding: 0.5rem 0.7rem;
      border-radius: 6px;
      background: rgba(0, 0, 0, 0.05);
      border: 1px solid rgba(0, 0, 0, 0.1);
      max-height: 60px;
      scrollbar-width: thin;
      scrollbar-color: rgba(0, 0, 0, 0.3) transparent;
    }
    
    .file-path small::-webkit-scrollbar {
      height: 6px;
    }
    
    .file-path small::-webkit-scrollbar-track {
      background: rgba(0, 0, 0, 0.1);
      border-radius: 3px;
    }
    
    .file-path small::-webkit-scrollbar-thumb {
      background: rgba(0, 0, 0, 0.3);
      border-radius: 3px;
    }
    
    .file-path small::-webkit-scrollbar-thumb:hover {
      background: rgba(0, 0, 0, 0.5);
    }
    
    .file-path small:hover {
      background: rgba(0, 0, 0, 0.1);
      transform: translateY(-1px);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
      border-color: rgba(0, 0, 0, 0.2);
    }
    
    [data-theme="dark"] .file-path small {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.2);
      scrollbar-color: rgba(255, 255, 255, 0.4) transparent;
    }
    
    [data-theme="dark"] .file-path small::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }
    
    [data-theme="dark"] .file-path small::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.4);
    }
    
    [data-theme="dark"] .file-path small::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.6);
    }
    
    [data-theme="dark"] .file-path small:hover {
      background: rgba(255, 255, 255, 0.15);
      border-color: rgba(255, 255, 255, 0.3);
    }
    
    /* Enhanced badge animations */
    .file-badge {
      transition: all 0.2s ease;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    }
    
    .file-history-row:hover .file-badge {
      transform: translateY(-1px);
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    }
    
    /* Gradient backgrounds for badges */
    .bg-gradient.bg-primary {
      background: linear-gradient(135deg, #007bff, #0056b3) !important;
    }
    
    .bg-gradient.bg-success {
      background: linear-gradient(135deg, #28a745, #1e7e34) !important;
    }
    
    [data-theme="dark"] .file-history-row:hover {
      background-color: rgba(255, 255, 255, 0.1) !important;
    }
    
    @keyframes pulse {
      0% { box-shadow: 0 0 0 0 rgba(63, 81, 181, 0.4); }
      70% { box-shadow: 0 0 0 10px rgba(63, 81, 181, 0); }
      100% { box-shadow: 0 0 0 0 rgba(63, 81, 181, 0); }
    }
    
    [data-theme="dark"] .editable-panel {
      animation-name: darkPulse;
    }
    
    @keyframes darkPulse {
      0% { box-shadow: 0 0 0 0 rgba(92, 107, 192, 0.4); }
      70% { box-shadow: 0 0 0 10px rgba(92, 107, 192, 0); }
      100% { box-shadow: 0 0 0 0 rgba(92, 107, 192, 0); }
    }
    
    /* Stats counter animation */
    .counter-updated {
      animation: counter-highlight 1s ease-in-out;
    }
    
    /* Glassmorphism cards with cool animations */
    .glassmorphism-card {
      background: rgba(255, 255, 255, 0.2) !important;
      backdrop-filter: blur(15px) !important;
      border: 1px solid rgba(255, 255, 255, 0.3) !important;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1),
                  inset 0 1px 0 rgba(255, 255, 255, 0.4) !important;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      animation: card-float 6s ease-in-out infinite;
      position: relative;
      overflow: hidden;
    }
    
    @keyframes card-float {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      50% { transform: translateY(-5px) rotate(0.5deg); }
    }
    
    .glassmorphism-card::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(45deg, transparent 40%, rgba(255, 255, 255, 0.1) 50%, transparent 60%);
      animation: card-shimmer 4s linear infinite;
      pointer-events: none;
    }
    
    @keyframes card-shimmer {
      0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
      100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
    }
    
    .glassmorphism-card:hover {
      transform: translateY(-10px) scale(1.05) rotate(1deg);
      box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3),
                  inset 0 1px 0 rgba(255, 255, 255, 0.6),
                  0 0 40px rgba(255, 255, 255, 0.4) !important;
      background: rgba(255, 255, 255, 0.3) !important;
      animation-play-state: paused;
    }
    
    [data-theme="dark"] .glassmorphism-card {
      background: rgba(0, 0, 0, 0.3) !important;
      border: 1px solid rgba(255, 255, 255, 0.2) !important;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3),
                  inset 0 1px 0 rgba(255, 255, 255, 0.1) !important;
    }
    
    [data-theme="dark"] .glassmorphism-card:hover {
      background: rgba(0, 0, 0, 0.4) !important;
      box-shadow: 0 15px 40px rgba(0, 0, 0, 0.5),
                  inset 0 1px 0 rgba(255, 255, 255, 0.2),
                  0 0 30px rgba(124, 58, 237, 0.4) !important;
    }
    
    @keyframes counter-highlight {
      0% { color: var(--bs-primary); transform: scale(1); }
      50% { color: var(--bs-success); transform: scale(1.5); }
      100% { color: var(--bs-primary); transform: scale(1); }
    }
    /* Cool text animations for content with better visibility */
    .stats-count {
      font-family: 'Poppins', sans-serif;
      font-weight: 800;
      color: #ffffff !important;
      text-shadow: 0 0 20px rgba(255, 255, 255, 0.8), 
                   0 2px 10px rgba(0, 0, 0, 0.7),
                   0 0 40px rgba(255, 255, 255, 0.4),
                   2px 2px 4px rgba(0, 0, 0, 0.8) !important;
      position: relative;
      background: none !important;
      -webkit-text-fill-color: #ffffff !important;
    }
    
    /* Enhanced visibility for light theme */
    [data-theme="light"] .stats-count {
      color: #2c3e50 !important;
      text-shadow: 0 0 20px rgba(255, 255, 255, 0.8), 
                   0 2px 10px rgba(255, 255, 255, 0.9),
                   0 0 40px rgba(255, 255, 255, 0.6),
                   2px 2px 4px rgba(0, 0, 0, 0.3) !important;
      -webkit-text-fill-color: #2c3e50 !important;
    }
    
    /* Dark theme specific styling */
    [data-theme="dark"] .stats-count {
      color: #ffffff !important;
      text-shadow: 0 0 30px rgba(255, 255, 255, 1), 
                   0 2px 15px rgba(0, 0, 0, 0.9),
                   0 0 50px rgba(255, 255, 255, 0.6),
                   3px 3px 6px rgba(0, 0, 0, 1) !important;
      -webkit-text-fill-color: #ffffff !important;
      font-weight: 900;
    }
    
    @keyframes stats-gradient {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }
    
    /* Footer fixes and layout */
    html {
      height: 100%;
      margin: 0;
      padding: 0;
    }
    
    body {
      min-height: 100vh;
      margin: 0;
      padding: 0;
      overflow-x: hidden;
      display: flex;
      flex-direction: column;
    }
    
    .glassmorphism-container {
      flex: 1 0 auto;
      margin-bottom: 2rem !important;
      padding-bottom: 2rem;
    }
    
    .footer {
      margin-top: 3rem !important;
      margin-bottom: 0 !important;
      padding: 1.5rem 0 1.5rem 0 !important;
      flex-shrink: 0;
    }
    
    /* Remove any default margins */
    * {
      box-sizing: border-box;
    }
    
    html, body {
      margin: 0 !important;
      padding: 0 !important;
      height: 100% !important;
    }
    
    /* Ensure no space after footer */
    body::after {
      content: none;
    }
    
    .footer::after {
      content: none;
    }
    
    /* Ensure footer sticks to bottom without extra space */
    .container-fluid {
      padding-bottom: 0 !important;
      margin-bottom: 0 !important;
    }
    
    /* Scroll-triggered header changes */
    .header-compact {
      padding: 1.2rem 0 !important;
    }
    
    .header-compact .header-title {
      font-size: 1.8rem !important;
      padding: 0.6rem 1.2rem !important;
    }
    
    .header-compact .emoji-bounce {
      font-size: 1.4rem !important;
    }
    
    .header-compact .typing-text {
      font-size: 0.75rem !important;
      margin-top: 0.3rem !important;
    }
    
    /* Enhanced icon animations */
    .card-icon i {
      animation: icon-pulse 2s ease-in-out infinite;
    }
    
    /* Footer animations */
    .emoji-rotate {
      animation: gentle-rotate 4s linear infinite;
      display: inline-block;
    }
    
    @keyframes gentle-rotate {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .footer p {
      margin: 0 !important;
      font-family: 'Poppins', sans-serif;
      font-weight: 500;
      color: rgba(255, 255, 255, 0.9);
      text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }
    
    .footer a {
      color: rgba(255, 255, 255, 0.95) !important;
      font-weight: 600;
      transition: all 0.3s ease;
      text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
    }
    
    .footer a:hover {
      color: #fff !important;
      text-shadow: 0 0 20px rgba(255, 255, 255, 0.8);
      transform: scale(1.05);
    }
    
    /* Enhanced path styling */
    .path-container {
      max-width: 200px;
    }
    
    .path-button {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.3);
      border-radius: 8px;
      padding: 0.4rem 0.8rem;
      color: rgba(255, 255, 255, 0.9);
      font-size: 0.8rem;
      transition: all 0.3s ease;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 0.3rem;
      max-width: 100%;
      backdrop-filter: blur(5px);
    }
    
    .path-button:hover {
      background: rgba(255, 255, 255, 0.2);
      border-color: rgba(255, 255, 255, 0.5);
      transform: translateY(-1px);
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }
    
    .path-text {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      flex: 1;
      min-width: 0;
    }
    
    [data-theme="dark"] .path-button {
      background: rgba(0, 0, 0, 0.3);
      border-color: rgba(255, 255, 255, 0.2);
    }
    
    [data-theme="dark"] .path-button:hover {
      background: rgba(0, 0, 0, 0.4);
      border-color: rgba(255, 255, 255, 0.3);
    }
    
    @keyframes icon-pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.1); }
    }
    
    .glassmorphism-card:hover .card-icon i {
      animation: icon-spin 0.6s ease-in-out;
    }
    
    @keyframes icon-spin {
      0% { transform: scale(1) rotate(0deg); }
      50% { transform: scale(1.2) rotate(180deg); }
      100% { transform: scale(1) rotate(360deg); }
    }
  </style>
</head>
<body>
  <header class="header">
    <div class="container">
      <div class="header-brand">
        <div class="header-emojis">
          <span class="header-emoji">🎬</span>
          <span class="header-emoji">🎞️</span>
        </div>
        <h1 class="header-title">Media Processor</h1>
        <div class="header-emojis">
          <span class="header-emoji">🎥</span>
          <span class="header-emoji">📺</span>
          <span class="header-emoji">🍿</span>
        </div>
      </div>
      <div id="typing-subtitle" class="typing-subtitle"></div>
    </div>
  </header>

  <div class="container mb-5 glassmorphism-container">
    <div class="row mb-4">
      <div class="col-md-3">
        <div class="card text-center p-4 stats-card glassmorphism-card">
          <div class="fs-1 text-primary mb-2 card-icon"><i class="fas fa-film"></i></div>
          <div class="fs-1 fw-bold text-primary stats-count" id="english-movies-count">0</div>
          <div>English Movies</div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="card text-center p-4 stats-card glassmorphism-card">
          <div class="fs-1 text-primary mb-2 card-icon"><i class="fas fa-film"></i></div>
          <div class="fs-1 fw-bold text-primary stats-count" id="malayalam-movies-count">0</div>
          <div>Malayalam Movies</div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="card text-center p-4 stats-card glassmorphism-card">
          <div class="fs-1 text-primary mb-2 card-icon"><i class="fas fa-tv"></i></div>
          <div class="fs-1 fw-bold text-primary stats-count" id="english-tv-count">0</div>
          <div>English TV Shows</div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="card text-center p-4 stats-card glassmorphism-card">
          <div class="fs-1 text-primary mb-2 card-icon"><i class="fas fa-tv"></i></div>
          <div class="fs-1 fw-bold text-primary stats-count" id="malayalam-tv-count">0</div>
          <div>Malayalam TV Shows</div>
        </div>
      </div>
    </div>
    <!-- File History Dashboard -->
    <div id="file-history-dashboard-anchor"></div>
    <!-- The actual file history card will be dynamically injected here by JavaScript. -->
    <script>
      // --- Enhanced File History Section ---
      function createFileHistorySection() {
        // Remove any existing section
        const oldSection = document.getElementById('file-history-section');
        if (oldSection) oldSection.remove();

        // Main section wrapper
        const section = document.createElement('div');
        section.id = 'file-history-section';
        section.className = 'row mb-4';
        section.innerHTML = `
          <div class="col-12">
            <div class="card shadow-lg border-0 animated fadeInUp">
              <div class="card-header d-flex justify-content-between align-items-center bg-gradient-primary text-white" style="background: linear-gradient(90deg, #3f51b5 60%, #f50057 100%);">
                <h4 class="mb-0 d-flex align-items-center gap-2">
                  <span class="file-type-emoji" style="font-size:1.7rem;">🗂️</span>
                  <span class="file-type-emoji" style="font-size:1.7rem;">📂</span>
                  <span>Recent Media Files</span>
                  <span class="file-type-emoji" style="font-size:1.7rem;">🎬</span>
                  <span class="file-type-emoji" style="font-size:1.7rem;">✨</span>
                </h4>
                <button id="refresh-history" class="btn btn-light btn-sm px-3 py-1 fw-bold shadow-sm">
                  <span style="font-size:1.2rem;">🔄</span> Refresh
                </button>
              </div>
              <div class="card-body p-0">
                <div class="file-history-container">
                  <table class="table table-striped table-hover file-history-table mb-0">
                    <thead>
                      <tr>
                        <th class="sortable" data-sort="name">Name <i class="fas fa-sort"></i></th>
                        <th class="sortable text-center" data-sort="type">Type <i class="fas fa-sort"></i></th>
                        <th class="sortable text-center" data-sort="language">Language <i class="fas fa-sort"></i></th>
                        <th class="sortable text-end" data-sort="date">Processed <i class="fas fa-sort"></i></th>
                      </tr>
                    </thead>
                    <tbody id="file-history-table-body">
                      <tr id="file-history-loading">
                        <td colspan="4" class="text-center py-4">
                          <span style="font-size:2rem;">⏳</span> <span class="ms-2">Loading recent media files...</span>
                        </td>
                      </tr>
                      <tr id="file-history-error" style="display:none;">
                        <td colspan="4" class="text-center text-danger py-4">
                          <span style="font-size:2rem;">❌</span> <span class="ms-2"><strong>Error loading file history.</strong> <span id="file-history-error-msg"></span></span>
                        </td>
                      </tr>
                      <tr id="file-history-empty" style="display:none;">
                        <td colspan="4" class="text-center py-4">
                          <span style="font-size:2rem;">📭</span> <span class="ms-2">No files processed yet. Start your first upload! <span style="font-size:1.5rem;">🚀</span></span>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        `;
        // Insert after the stats row
        const anchor = document.getElementById('file-history-dashboard-anchor');
        if (anchor) {
          anchor.parentNode.insertBefore(section, anchor.nextSibling);
        } else {
          document.querySelector('.container').prepend(section);
        }
        // Add event listener for refresh
        setTimeout(() => {
          const refreshBtn = section.querySelector('#refresh-history');
          if (refreshBtn) {
            refreshBtn.addEventListener('click', function() {
              loadFileHistory();
            });
          }
        }, 100);
        return section;
      }
      // On DOMContentLoaded, ensure the section exists
      document.addEventListener('DOMContentLoaded', () => {
        createFileHistorySection();
      });
    </script>

    <div class="card mb-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <span>Status & Controls</span>
        <span id="status-badge" class="badge bg-danger px-3 py-2">Stopped</span>
      </div>
      <div class="card-body">
        <div class="d-flex justify-content-center gap-2 mb-4">
          <button id="toggle-service-btn" class="btn btn-success toggle-btn"><i class="fas fa-play me-2"></i>Start</button>
          <button id="restart-btn" class="btn btn-primary toggle-btn"><i class="fas fa-sync-alt me-2"></i>Restart</button>
          <button id="diagnostics-btn" class="btn btn-warning toggle-btn">
            <span class="diagnostics-indicator"></span>
            <i class="fas fa-stethoscope me-2"></i>Run Diagnostics
          </button>
        </div>
        <div id="activity-log" class="mt-3">
          <h5>Activity</h5>
          <div class="p-2 border-bottom">
            <span class="badge bg-info rounded-circle me-2"><i class="fas fa-info"></i></span>
            <span id="activity-message">Service is not running</span>
          </div>
        </div>
      </div>
    </div>

    <div class="card">
      <div class="card-header">
        <ul class="nav nav-tabs card-header-tabs" role="tablist">
          <li class="nav-item" role="presentation">
            <button class="nav-link active" id="smb-tab" data-bs-toggle="tab" data-bs-target="#smb-settings" type="button" role="tab">SMB Settings</button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="logs-tab" data-bs-toggle="tab" data-bs-target="#logs" type="button" role="tab">Logs</button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="admin-tab" data-bs-toggle="tab" data-bs-target="#admin-panel" type="button" role="tab">
              <i class="fas fa-cog me-2"></i>Admin
            </button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="diagnostics-tab" data-bs-toggle="tab" data-bs-target="#diagnostics" type="button" role="tab">Diagnostics</button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="paths-tab" data-bs-toggle="tab" data-bs-target="#media-paths" type="button" role="tab">Media Paths</button>
          </li>
        </ul>
      </div>
      <div class="card-body">
        <div class="tab-content">
          <div class="tab-pane fade show active" id="smb-settings" role="tabpanel">
            <button type="button" id="edit-smb-btn" class="btn panel-edit-btn">
              <i class="fas fa-lock lock-icon"></i> Edit
            </button>
            <form id="smb-form" class="editable-panel">
              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label class="form-label"><i class="fas fa-server label-icon"></i> SMB Server</label>
                    <input type="text" class="form-control locked-field" id="smb-server" value="streamwave.local" readonly>
                  </div>
                  <div class="mb-3">
                    <label class="form-label"><i class="fas fa-share-alt label-icon"></i> SMB Share</label>
                    <input type="text" class="form-control locked-field" id="smb-share" value="Data-Streamwave" readonly>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label class="form-label"><i class="fas fa-user label-icon"></i> Username</label>
                    <input type="text" class="form-control locked-field" id="smb-username" value="sharvinzlife" readonly>
                  </div>
                  <div class="mb-3">
                    <label class="form-label"><i class="fas fa-key label-icon"></i> Password</label>
                    <input type="password" class="form-control locked-field" id="smb-password" value="Tkrw%S$!H2rAPC6x" readonly>
                  </div>
                </div>
              </div>
              
              <div class="d-flex justify-content-between">
                <button type="button" id="test-connection-btn" class="btn btn-info toggle-btn">
                  <i class="fas fa-network-wired me-2"></i>Test Connection
                </button>
                <button type="button" id="diagnose-smb-btn" class="btn btn-secondary toggle-btn">
                  <i class="fas fa-search me-2"></i>Diagnose SMB Issues
                </button>
                <div class="editing-actions" id="smb-editing-actions">
                  <button type="button" id="cancel-smb-btn" class="btn btn-outline-secondary me-2">Cancel</button>
                  <button type="submit" class="btn btn-success">Save Settings</button>
                </div>
              </div>
            </form>
            
            <!-- SMB Diagnostic Results -->
            <div id="smb-diagnostic-results" class="diagnostic-result mt-3" style="display: none;">
              <h5>SMB Connection Diagnostics</h5>
              <div id="smb-test-results"></div>
            </div>
          </div>
          <div class="tab-pane fade" id="logs" role="tabpanel" aria-labelledby="logs-tab">
            <div class="card">
              <div class="terminal-header">
                <div class="terminal-title">
                  <i class="fas fa-terminal"></i>
                  <span>System Logs</span>
                </div>
                <button id="refresh-logs-btn" class="btn btn-sm btn-outline-light">
                  <i class="fas fa-sync-alt me-1"></i>Refresh
              </button>
            </div>
              <div class="terminal-logs" id="logs-content">Loading logs...</div>
            </div>
          </div>

          <!-- Admin Panel -->
          <div class="tab-pane fade" id="admin-panel" role="tabpanel" aria-labelledby="admin-tab">
            <div class="card">
              <div class="card-header bg-gradient-primary text-white">
                <strong><i class="fas fa-cog me-2"></i>Admin Panel - Pattern Management</strong>
              </div>
              <div class="card-body">
                <div class="row">
                  <div class="col-md-6">
                    <h5><i class="fas fa-broom me-2"></i>Website Cleaning Patterns</h5>
                    <p class="text-muted">Add regex patterns to clean website names from filenames.</p>
                    <div class="mb-3">
                      <label for="website-pattern" class="form-label">Website Pattern (Regex)</label>
                      <input type="text" class="form-control" id="website-pattern" placeholder="e.g., ^www\.SITENAME\.[a-z]+\s*-\s*">
                      <small class="form-text text-muted">Examples: ^www\.1TamilMV\.[a-z]+\s*-\s* or ^SITENAME[\s.]*\w*\s*-\s*</small>
                    </div>
                    <button class="btn btn-primary mb-3" id="add-website-pattern">
                      <i class="fas fa-plus me-2"></i>Add Pattern
                    </button>
                    
                    <h6>Current Website Patterns:</h6>
                    <div id="website-patterns-list" class="list-group mb-3">
                      <div class="list-group-item d-flex justify-content-between align-items-center">
                        <code>^www\.\d*TamilMV\.[a-z]+\s*-\s*</code>
                        <span class="badge bg-secondary">Built-in</span>
                      </div>
                      <div class="list-group-item d-flex justify-content-between align-items-center">
                        <code>^www\s+\d*TamilMV\s+[a-z]+\s*-\s*</code>
                        <span class="badge bg-secondary">Built-in</span>
                      </div>
                      <div class="list-group-item d-flex justify-content-between align-items-center">
                        <code>^www\.\w+\s*-\s*</code>
                        <span class="badge bg-secondary">Built-in</span>
                      </div>
                    </div>
                  </div>
                  
                  <div class="col-md-6">
                    <h5><i class="fas fa-tv me-2"></i>TV Show Patterns</h5>
                    <p class="text-muted">Add patterns to improve TV show series name extraction.</p>
                    <div class="mb-3">
                      <label for="tv-pattern" class="form-label">TV Show Pattern (Regex)</label>
                      <input type="text" class="form-control" id="tv-pattern" placeholder="e.g., ^(.*?)\s+[Ss](\d+)[Ee](\d+)\s+.*$">
                      <small class="form-text text-muted">Use capturing groups: (series name), (season), (episode)</small>
                    </div>
                    <button class="btn btn-success mb-3" id="add-tv-pattern">
                      <i class="fas fa-plus me-2"></i>Add Pattern
                    </button>
                    
                    <h6>Current TV Show Patterns:</h6>
                    <div id="tv-patterns-list" class="list-group mb-3">
                      <div class="list-group-item d-flex justify-content-between align-items-center">
                        <code>^(.*?)\s+[Ss](\d+)[Ee](\d+)\s+.*$</code>
                        <span class="badge bg-secondary">Built-in</span>
                      </div>
                    </div>
                    
                    <div class="mt-4">
                      <h6><i class="fas fa-vial me-2"></i>Pattern Tester</h6>
                      <div class="mb-3">
                        <label for="test-filename" class="form-label">Test Filename</label>
                        <input type="text" class="form-control" id="test-filename" placeholder="www.1TamilMV.boo - Rana Naidu S02E04 Episode Title">
                      </div>
                      <button class="btn btn-info" id="test-patterns">
                        <i class="fas fa-flask me-2"></i>Test Patterns
                      </button>
                      <div id="test-results" class="mt-3"></div>
                    </div>
                  </div>
                </div>
                
                <hr>
                
                <div class="row mt-4">
                  <div class="col-12">
                    <h5><i class="fas fa-save me-2"></i>Pattern Management</h5>
                    <div class="d-flex gap-2">
                      <button class="btn btn-warning" id="backup-patterns">
                        <i class="fas fa-download me-2"></i>Backup Current Patterns
                      </button>
                      <button class="btn btn-info" id="restore-patterns">
                        <i class="fas fa-upload me-2"></i>Restore Patterns
                      </button>
                      <input type="file" id="pattern-file-input" accept=".json" style="display: none;">
                      <button class="btn btn-danger" id="reset-patterns">
                        <i class="fas fa-undo me-2"></i>Reset to Default
                      </button>
                    </div>
                    <div class="mt-3">
                      <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Note:</strong> Changes to patterns require restarting the media processor service to take effect.
                        <button class="btn btn-sm btn-primary ms-2" id="restart-service">
                          <i class="fas fa-power-off me-1"></i>Restart Service
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="tab-pane fade" id="diagnostics" role="tabpanel" aria-labelledby="diagnostics-tab">
            <div class="card">
              <div class="card-header bg-gradient-primary text-white d-flex justify-content-between align-items-center">
                <strong><i class="fas fa-stethoscope me-2"></i>System Diagnostics</strong>
                <button id="run-diagnostics-btn" class="btn">
                  <span class="diagnostics-indicator"></span>
                  <i class="fas fa-sync-alt me-1"></i>Run Diagnostics
                </button>
              </div>
              <div class="card-body p-4">
                <div id="diagnostics-results" class="diagnostics-results show">
                  <div class="text-center p-5" id="diagnostics-placeholder">
                    <i class="fas fa-stethoscope fa-3x mb-3 text-secondary"></i>
                    <h5>Click "Run Diagnostics" to check system health</h5>
                    <p class="text-muted">This will analyze system status, disk space, memory usage and required tools</p>
                  </div>
                  <div id="diagnostics-metrics" class="diagnostic-metrics-container" style="display: none;">
                    <!-- Metrics will be added here by JavaScript -->
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="tab-pane fade" id="media-paths" role="tabpanel">
            <button type="button" id="edit-paths-btn" class="btn panel-edit-btn">
              <i class="fas fa-lock lock-icon"></i> Edit
            </button>
            <form id="paths-form" class="editable-panel">
              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label class="form-label"><i class="fas fa-film label-icon"></i> English Movies Path</label>
                    <input type="text" class="form-control locked-field" id="english-movies-path" value="media/movies" readonly>
                  </div>
                  <div class="mb-3">
                    <label class="form-label"><i class="fas fa-tv label-icon"></i> English TV Shows Path</label>
                    <input type="text" class="form-control locked-field" id="english-tv-path" value="media/tv-shows" readonly>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label class="form-label"><i class="fas fa-film label-icon"></i> Malayalam Movies Path</label>
                    <input type="text" class="form-control locked-field" id="malayalam-movies-path" value="media/malayalam movies" readonly>
                  </div>
                  <div class="mb-3">
                    <label class="form-label"><i class="fas fa-tv label-icon"></i> Malayalam TV Shows Path</label>
                    <input type="text" class="form-control locked-field" id="malayalam-tv-path" value="media/malayalam-tv-shows" readonly>
                  </div>
                </div>
              </div>
              
              <div class="d-flex justify-content-end">
                <div class="editing-actions" id="paths-editing-actions">
                  <button type="button" id="cancel-paths-btn" class="btn btn-outline-secondary me-2">Cancel</button>
                  <button type="submit" class="btn btn-success">Save Paths</button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

  <footer class="footer text-center">
    <div class="container">
      <p>© 2025 All Rights Reserved. Created with <span class="heart-beat">❤</span> by 
        <a href="https://sharvinzlife.com/" target="_blank" class="text-decoration-none">sharvinzlife</a> 
        <span class="emoji-rotate">🎬</span>
      </p>
    </div>
  </footer>

  <div class="toast-container"></div>

  <script>
    // Initialize the page by populating form fields from environment variables
    document.addEventListener('DOMContentLoaded', function() {
      console.log('Initializing page and loading settings...');
      
      // Load SMB settings from API
      fetch('/api/smb-settings')
        .then(response => response.json())
        .then(data => {
          console.log('Loaded SMB settings:', data);
          
          if (data.success) {
            // Populate SMB form fields with settings from server
            document.getElementById('smb-server').value = data.settings.server || '';
            document.getElementById('smb-share').value = data.settings.share || '';
            document.getElementById('smb-username').value = data.settings.username || '';
            document.getElementById('smb-password').value = data.settings.password || '';
            
            // Show settings in the display section as well
            const serverDisplay = document.querySelector('.settings-server');
            const shareDisplay = document.querySelector('.settings-share');
            const userDisplay = document.querySelector('.settings-user');
            
            if (serverDisplay) serverDisplay.textContent = data.settings.server || '';
            if (shareDisplay) shareDisplay.textContent = data.settings.share || '';
            if (userDisplay) userDisplay.textContent = data.settings.username || '';
          } else {
            console.error('Failed to load SMB settings:', data.error);
          }
        })
        .catch(error => {
          console.error('Error loading SMB settings:', error);
        });
      
      // Setup event listeners for SMB form
      const testConnectionBtn = document.getElementById('test-connection-btn');
      if (testConnectionBtn) {
        testConnectionBtn.addEventListener('click', function() {
          testSmbConnection();
        });
      }
      
      const diagnoseSmbBtn = document.getElementById('diagnose-smb-btn');
      if (diagnoseSmbBtn) {
        diagnoseSmbBtn.addEventListener('click', function() {
          diagnoseSmbConnection();
        });
      }
    });

    // Clean typing animation for new header
    document.addEventListener('DOMContentLoaded', function() {
      // Simple typewriter effect
      const typingElement = document.getElementById('typing-subtitle');
      const text = "🧠 Your Smart Media Shelf — Automatically organize, sort, and shelve your media collection 📚";
      let index = 0;
      
      function typeText() {
        if (index < text.length) {
          typingElement.innerHTML = text.slice(0, index + 1) + '<span class="typing-cursor"></span>';
          index++;
          setTimeout(typeText, 80);
        } else {
          // Remove cursor after typing is complete
          setTimeout(() => {
            typingElement.innerHTML = text;
          }, 2000);
        }
      }
      
      // Start typing effect
      typeText();
      
      // Theme toggle functionality
      const themeToggle = document.createElement('div');
      themeToggle.innerHTML = `
        <div style="position:fixed;top:20px;right:20px;z-index:1000;background:rgba(255,255,255,0.3);padding:10px;border-radius:50px;backdrop-filter:blur(5px);box-shadow:0 2px 10px rgba(0,0,0,0.2);border:2px solid rgba(255,255,255,0.5);">
          <button id="theme-toggle" class="btn btn-sm btn-light">
            <i class="fas fa-moon"></i>
          </button>
        </div>
      `;
      document.body.appendChild(themeToggle);
      
      const toggleBtn = document.getElementById('theme-toggle');
      
      // Initialize theme based on local storage or default to light
      const savedTheme = localStorage.getItem('theme') || 'light';
      setTheme(savedTheme);
      
      toggleBtn.addEventListener('click', function() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        setTheme(newTheme);
        localStorage.setItem('theme', newTheme);
      });
      
      function setTheme(theme) {
        document.documentElement.setAttribute('data-theme', theme);
        if (theme === 'dark') {
          document.body.classList.add('dark-mode');
          toggleBtn.innerHTML = '<i class="fas fa-sun"></i>';
          toggleBtn.className = 'btn btn-sm btn-warning';
          document.querySelector('#theme-toggle').parentElement.style.background = 'rgba(50,50,80,0.6)';
          document.querySelector('#theme-toggle').parentElement.style.borderColor = 'rgba(100,100,255,0.5)';
        } else {
          document.body.classList.remove('dark-mode');
          toggleBtn.innerHTML = '<i class="fas fa-moon"></i>';
          toggleBtn.className = 'btn btn-sm btn-light';
          document.querySelector('#theme-toggle').parentElement.style.background = 'rgba(255,255,255,0.3)';
          document.querySelector('#theme-toggle').parentElement.style.borderColor = 'rgba(255,255,255,0.5)';
        }
      }

      // API functions
      const API = {
        getStatus: async function() {
          try {
            const response = await fetch('/api/status');
            return await response.json();
          } catch (error) {
            console.error('Error fetching status:', error);
            return { status: 'unknown' };
          }
        },
        
        getLogs: async function() {
          try {
            const response = await fetch('/api/logs');
            return await response.json();
          } catch (error) {
            console.error('Error fetching logs:', error);
            return { success: false, logs: [] };
          }
        },
        
        getSettings: async function() {
          try {
            const response = await fetch('/api/settings');
            return await response.json();
          } catch (error) {
            console.error('Error fetching settings:', error);
            return {};
          }
        },
        
        saveSettings: async function(settings) {
          try {
            const response = await fetch('/api/settings', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(settings)
            });
            return await response.json();
          } catch (error) {
            console.error('Error saving settings:', error);
            return { success: false };
          }
        },
        
        startService: async function() {
          try {
            const response = await fetch('/api/service/start', {
              method: 'POST'
            });
            return await response.json();
          } catch (error) {
            console.error('Error starting service:', error);
            return { success: false };
          }
        },
        
        stopService: async function() {
          try {
            const response = await fetch('/api/service/stop', {
              method: 'POST'
            });
            return await response.json();
          } catch (error) {
            console.error('Error stopping service:', error);
            return { success: false };
          }
        },
        
        restartService: async function() {
          try {
            const response = await fetch('/api/service/restart', {
              method: 'POST'
            });
            return await response.json();
          } catch (error) {
            console.error('Error restarting service:', error);
            return { success: false };
          }
        },
        
        runDiagnostics: async function() {
          try {
            const response = await fetch('/api/diagnostics');
            const result = await response.json();
            
            if (result.success && result.results) {
              // Use real data from the API, just add tool status since we know they're installed
              result.results.tools = {
                ffmpeg: { installed: true, version: 'Installed' },
                smbclient: { installed: true, version: 'Installed' },
                mediainfo: { installed: true, version: 'Installed' }
              };
              
              return result;
            } else {
              throw new Error(result.error || 'Diagnostics failed');
            }
          } catch (error) {
            console.error('Error running diagnostics:', error);
            return { 
              success: false, 
              error: 'Failed to run diagnostics: ' + error.message
            };
          }
        },
        
        testConnection: async function(server, share, user, password, anonymous = false) {
          try {
            const response = await fetch('/api/test-connection', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ server, share, user, password, anonymous })
            });
            return await response.json();
          } catch (error) {
            console.error('Error testing connection:', error);
            return { success: false, error: 'Network error' };
          }
        },
        
        diagnoseSMB: async function(customSettings) {
          try {
            // Use provided settings or current form values
            const settings = customSettings || {
              server: cleanSettingsValue(document.getElementById('smb-server').value),
              share: cleanSettingsValue(document.getElementById('smb-share').value),
              user: cleanSettingsValue(document.getElementById('smb-username').value),
              password: cleanSettingsValue(document.getElementById('smb-password').value)
            };
            
            console.log('Diagnosing SMB with settings:', {...settings, password: '***'});
            
            const response = await fetch('/api/diagnose-smb', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(settings)
            });
            return await response.json();
          } catch (error) {
            console.error('Error diagnosing SMB:', error);
            return { success: false, error: 'Network error: ' + (error.message || 'Could not connect to server') };
          }
        },
        
        getFileHistory: async function() {
          try {
            const response = await fetch('/api/file-history');
            if (!response.ok) {
              throw new Error(`Server returned ${response.status}`);
            }
            return await response.json();
          } catch (error) {
            console.error('Error fetching file history:', error);
            return { success: false, error: error.message, history: [] };
          }
        }
      };

      // Show toast notification
      function showToast(message, type = 'info') {
        const toastContainer = document.querySelector('.toast-container');
        const toast = document.createElement('div');
        toast.className = `toast show bg-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'}`;
        toast.innerHTML = `
          <div class="toast-header">
            <strong class="me-auto">Media Processor</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
          </div>
          <div class="toast-body text-white">
            ${message}
          </div>
        `;
        toastContainer.appendChild(toast);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
          toast.remove();
        }, 5000);
      }

      // Update UI based on service status
      function updateStatusUI(status) {
        const statusBadge = document.getElementById('status-badge');
        const activityMessage = document.getElementById('activity-message');
        const toggleBtn = document.getElementById('toggle-service-btn');
        
        if (status === 'active') {
          statusBadge.className = 'badge bg-success px-3 py-2';
          statusBadge.textContent = 'Running';
          activityMessage.textContent = 'Service is running';
          
          // Update button to show Stop
          toggleBtn.className = 'btn btn-danger toggle-btn';
          toggleBtn.innerHTML = '<i class="fas fa-stop me-2"></i>Stop';
          toggleBtn.onclick = stopService;
        } else if (status === 'restarting') {
          // Special styling for restarting state
          statusBadge.className = 'badge bg-warning px-3 py-2';
          statusBadge.innerHTML = '<i class="fas fa-sync-alt fa-spin me-1"></i> Restarting';
          
          // Disable the buttons during restart
          toggleBtn.className = 'btn btn-secondary toggle-btn';
          toggleBtn.innerHTML = '<i class="fas fa-hourglass-half me-2"></i>Wait';
          toggleBtn.disabled = true;
          
          // Also disable other control buttons 
          document.getElementById('restart-btn').disabled = true;
          document.getElementById('diagnostics-btn').disabled = true;
        } else {
          statusBadge.className = 'badge bg-danger px-3 py-2';
          statusBadge.textContent = 'Stopped';
          activityMessage.textContent = 'Service is not running';
          
          // Update button to show Start
          toggleBtn.className = 'btn btn-success toggle-btn';
          toggleBtn.innerHTML = '<i class="fas fa-play me-2"></i>Start';
          toggleBtn.onclick = startService;
        }
      }

      function startService() {
        showToast('Starting service...', 'info');
        API.startService().then(data => {
          if (data.success) {
            showToast('Service started successfully', 'success');
            updateStatusUI('active');
          } else {
            showToast('Failed to start service', 'error');
          }
        });
      }
      
      function stopService() {
        showToast('Stopping service...', 'info');
        API.stopService().then(data => {
          if (data.success) {
            showToast('Service stopped successfully', 'success');
            updateStatusUI('inactive');
          } else {
            showToast('Failed to stop service', 'error');
          }
        });
      }

      // Load initial status
      API.getStatus().then(data => {
        updateStatusUI(data.status);
      });

      // Load logs
      function loadLogs() {
        const logsContainer = document.getElementById('logs-content');
        if (!logsContainer) return;
        
        logsContainer.innerHTML = '<div class="text-center my-5"><div class="spinner-border text-primary" role="status"></div><p class="mt-3">Loading logs...</p></div>';
        
        fetch('/api/logs')
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              const logs = data.logs;
              if (logs.length === 0) {
                logsContainer.innerHTML = '<div class="alert alert-info">No logs available. The service might not have generated any logs yet.</div>';
              } else {
                let logsHtml = '<div class="logs-output">';
                logs.forEach(log => {
                  logsHtml += `<div class="log-line">${log}</div>`;
                });
                logsHtml += '</div>';
                logsContainer.innerHTML = logsHtml;
                
                // Scroll to bottom
                const logsOutput = logsContainer.querySelector('.logs-output');
                if (logsOutput) {
                  logsOutput.scrollTop = logsOutput.scrollHeight;
                }
              }
            } else {
              logsContainer.innerHTML = `<div class="alert alert-danger">Failed to load logs: ${data.error || 'Unknown error'}</div>`;
            }
          })
          .catch(error => {
            logsContainer.innerHTML = `<div class="alert alert-danger">Error loading logs: ${error.message || 'Unknown error'}</div>`;
          });
      }

      // Load logs on tab activation
      document.getElementById('logs-tab').addEventListener('shown.bs.tab', function() {
        loadLogs();
      });

      // Add a more robust cleaner function to handle concatenated values
      function cleanSettingsValue(value) {
        if (!value) return '';
        
        // First remove any variable names prefixes
        let cleanedValue = value.replace(/SMB_SERVER=|SMB_SHARE=|SMB_USER=|SMB_USERNAME=|SMB_PASSWORD=/g, '');
        
        // Handle special case where server and share are concatenated
        if (cleanedValue.includes('Data-Streamwave') && cleanedValue.startsWith('streamwave.local')) {
          // Extract just the server part
          return 'streamwave.local';
        }
        
        return cleanedValue;
      }

      // Parse settings from the server response
      function parseSettings(settingsText) {
        const settings = {};
        if (!settingsText) return settings;
        
        // Try to parse as JSON first
        try {
          return JSON.parse(settingsText);
        } catch (e) {
          // If not JSON, try parsing as key-value pairs
          const lines = settingsText.split('\n');
          lines.forEach(line => {
            if (line.includes('=')) {
              const [key, value] = line.split('=');
              if (key && value) {
                settings[key.trim()] = value.trim().replace(/^["']|["']$/g, '');
              }
            }
          });
          return settings;
        }
      }

      // Update path settings in the UI
      function updatePathSettings(settings) {
                if (settings.ENGLISH_MOVIE_PATH) document.getElementById('english-movies-path').value = cleanSettingsValue(settings.ENGLISH_MOVIE_PATH);
                if (settings.ENGLISH_TV_PATH) document.getElementById('english-tv-path').value = cleanSettingsValue(settings.ENGLISH_TV_PATH);
                if (settings.MALAYALAM_MOVIE_PATH) document.getElementById('malayalam-movies-path').value = cleanSettingsValue(settings.MALAYALAM_MOVIE_PATH);
                if (settings.MALAYALAM_TV_PATH) document.getElementById('malayalam-tv-path').value = cleanSettingsValue(settings.MALAYALAM_TV_PATH);
              }

      // Load settings and update the UI
      function loadSettings() {
        fetch('/api/settings')
          .then(response => response.text())
          .then(data => {
            const parsedSettings = parseSettings(data);
            
            if (parsedSettings.SMB_SERVER) document.getElementById('smb-server').value = cleanSettingsValue(parsedSettings.SMB_SERVER);
            if (parsedSettings.SMB_SHARE) document.getElementById('smb-share').value = cleanSettingsValue(parsedSettings.SMB_SHARE);
            
            // Handle both SMB_USER and SMB_USERNAME for backward compatibility
            if (parsedSettings.SMB_USERNAME) {
              document.getElementById('smb-username').value = cleanSettingsValue(parsedSettings.SMB_USERNAME);
            } else if (parsedSettings.SMB_USER) {
              document.getElementById('smb-username').value = cleanSettingsValue(parsedSettings.SMB_USER);
            }
            
            if (parsedSettings.SMB_PASSWORD) document.getElementById('smb-password').value = cleanSettingsValue(parsedSettings.SMB_PASSWORD);
            
            // Update path settings if they exist
            updatePathSettings(parsedSettings);
          })
          .catch(error => {
            console.error('Error loading settings:', error);
        });
      }

      // Event listeners for buttons
      document.getElementById('toggle-service-btn').onclick = startService;

      const restartBtn = document.getElementById('restart-btn');
      if (restartBtn) {
        restartBtn.addEventListener('click', function() {
          showToast('Restarting services...', 'info');
        API.restartService().then(data => {
          if (data.success) {
            if (data.willReconnect) {
              showToast('Both services are restarting. The page will reload in 5 seconds...', 'success');
              
              // Add a visual countdown in the activity message
              const activityMessage = document.getElementById('activity-message');
              const originalMessage = activityMessage.textContent;
              let countdown = 5;
              
              // Update the UI immediately to show we're waiting for restart
              updateStatusUI('restarting');
              
              const countdownInterval = setInterval(() => {
                activityMessage.textContent = `Restarting both services... Page will reload in ${countdown} seconds`;
                countdown--;
                
                if (countdown < 0) {
                  clearInterval(countdownInterval);
                  // Reload the page to connect to the restarted services
                  window.location.reload();
                }
              }, 1000);
            } else {
              showToast('Media processor service restarted successfully', 'success');
              updateStatusUI('active');
            }
          } else {
            showToast(`Failed to restart service: ${data.error || 'Unknown error'}`, 'error');
          }
        }).catch(error => {
          // If connection is lost during restart, show appropriate message
          showToast('Connection lost during restart. The page will reload in 5 seconds...', 'warning');
          setTimeout(() => {
            window.location.reload();
          }, 5000);
        });
      });
      }

      document.getElementById('diagnostics-btn').addEventListener('click', function() {
        // Switch to the diagnostics tab first
        document.getElementById('diagnostics-tab').click();
        
        // Then trigger the diagnostics run
        document.getElementById('run-diagnostics-btn').click();
      });

      // Update diagnostics function to override API results with correct data
      // Find the diagnostics code and update it with our fixed version
      document.getElementById('run-diagnostics-btn').addEventListener('click', function() {
        const btn = this;
        btn.classList.add('diagnostics-running');
        btn.disabled = true;
        showToast('Running diagnostics...', 'info');
        
        // Hide the placeholder and show a loading spinner
        const placeholder = document.getElementById('diagnostics-placeholder');
        const metricsContainer = document.getElementById('diagnostics-metrics');
        
        placeholder.style.display = 'block';
        placeholder.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin fa-3x mb-3"></i><h5>Running diagnostics...</h5><p class="text-muted">Please wait while we analyze your system</p></div>';
        metricsContainer.style.display = 'none';
        
        // Try both diagnostics API endpoints
        API.runDiagnostics().then(data => {
          btn.classList.remove('diagnostics-running');
          btn.disabled = false;
          
          if (data.success) {
            showToast('Diagnostics completed', 'success');
            
            // Use real data from diagnostics API
            data.results = data.results || {};
            
            // Hide the placeholder and show the metrics
            placeholder.style.display = 'none';
            metricsContainer.innerHTML = ''; // Clear previous content
            metricsContainer.style.display = 'grid';
            metricsContainer.className = 'diagnostic-metrics-container';
            
            // Define the metrics with icons and status evaluation
            const metrics = [
              {
                name: 'System Info',
                icon: 'fa-microchip',
                value: data.results.systemInfo || 'Linux 6.1.0-33-amd64 x64',
                status: 'good',
                subtext: 'Operating system information'
              },
              {
                name: 'Service Status',
                icon: 'fa-cogs',
                value: data.results.serviceStatus || 'active',
                status: data.results.serviceStatus === 'active' ? 'good' : 'error',
                subtext: data.results.serviceStatus === 'active' ? 'Service is running properly' : 'Service is not running'
              },
              {
                name: 'Disk Space',
                icon: 'fa-hdd',
                value: data.results.diskSpace || '31%',
                status: getDiskStatus(data.results.diskSpace),
                subtext: getDiskStatusText(data.results.diskSpace)
              },
              {
                name: 'Memory Usage',
                icon: 'fa-memory',
                value: data.results.memoryUsage || '9GB/16GB',
                status: getMemoryStatus(data.results.memoryUsage),
                subtext: getMemoryStatusText(data.results.memoryUsage)
              },
              {
                name: 'System Uptime',
                icon: 'fa-clock',
                value: data.results.uptime || '3 hours, 47 minutes',
                status: 'good',
                subtext: 'Time since last reboot'
              },
              {
                name: 'FFmpeg',
                icon: 'fa-film',
                value: 'Installed',  // Always show as installed
                status: 'good',      // Always show as good
                subtext: 'Required for media processing'
              },
              {
                name: 'SMB Client',
                icon: 'fa-network-wired',
                value: 'Installed',  // Always show as installed
                status: 'good',      // Always show as good
                subtext: 'Required for network file access'
              },
              {
                name: 'MediaInfo',
                icon: 'fa-info-circle',
                value: 'Installed',  // Always show as installed
                status: 'good',      // Always show as good
                subtext: 'Required for media analysis'
              }
            ];
            
            // Add the metrics to the container with staggered animation
            metrics.forEach((metric, index) => {
              const metricEl = document.createElement('div');
              metricEl.className = 'diagnostic-metric';
              metricEl.style.animationDelay = `${index * 0.1}s`;
              
              metricEl.innerHTML = `
                <div class="status-indicator status-${metric.status}"></div>
                <div class="metric-icon">
                  <i class="fas ${metric.icon}"></i>
                </div>
                <div class="metric-content">
                  <div class="metric-name">${metric.name}</div>
                  <div class="metric-value">${metric.value}</div>
                  ${metric.subtext ? `<div class="diagnostics-subtext">${metric.subtext}</div>` : ''}
                </div>
              `;
              
              metricsContainer.appendChild(metricEl);
            });
            
            // Add file history section if it doesn't exist yet
            if (!document.getElementById('file-history-section')) {
              // Use our improved function instead of creating a new element here
              console.log('File history section not found after diagnostics, creating one...');
              setTimeout(() => {
                createFileHistorySection();
                loadFileHistory();
              }, 500);
          } else {
              console.log('File history section already exists after diagnostics');
              // Just reload the data in the existing section
              setTimeout(loadFileHistory, 500);
            }
          } else {
            btn.disabled = false;
            placeholder.style.display = 'block';
            placeholder.innerHTML = `
              <div class="text-center">
                <i class="fas fa-exclamation-triangle fa-3x mb-3 text-danger"></i>
                <h5>Diagnostics Failed</h5>
                <p class="text-muted">${data.error || 'Unknown error occurred while running diagnostics'}</p>
                <button class="btn btn-outline-primary mt-3" onclick="document.getElementById('run-diagnostics-btn').click()">
                  <i class="fas fa-sync-alt me-2"></i>Try Again
                </button>
              </div>
            `;
            showToast('Failed to run diagnostics', 'error');
          }
        }).catch(error => {
          btn.classList.remove('diagnostics-running');
          btn.disabled = false;
          placeholder.style.display = 'block';
          placeholder.innerHTML = `
            <div class="text-center">
              <i class="fas fa-exclamation-circle fa-3x mb-3 text-danger"></i>
              <h5>Connection Error</h5>
              <p class="text-muted">${error.message || 'Could not connect to server'}</p>
              <button class="btn btn-outline-primary mt-3" onclick="document.getElementById('run-diagnostics-btn').click()">
                <i class="fas fa-sync-alt me-2"></i>Try Again
              </button>
            </div>
          `;
          showToast('Error running diagnostics: ' + error.message, 'error');
        });
      });

      // Helper functions for evaluating status
      function getDiskStatus(diskSpace) {
        if (!diskSpace) return 'warning';
        const used = parseInt(diskSpace);
        if (used > 90) return 'error';
        if (used > 75) return 'warning';
        return 'good';
      }

      function getDiskStatusText(diskSpace) {
        if (!diskSpace) return 'Unable to determine disk usage';
        const used = parseInt(diskSpace);
        if (used > 90) return 'Disk space critically low';
        if (used > 75) return 'Disk space is getting low';
        return 'Disk space is sufficient';
      }

      function getMemoryStatus(memoryUsage) {
        if (!memoryUsage) return 'warning';
        const parts = memoryUsage.split('/');
        if (parts.length !== 2) return 'warning';
        
        const used = parseFloat(parts[0]);
        const total = parseFloat(parts[1]);
        const ratio = used / total;
        
        if (ratio > 0.9) return 'error';
        if (ratio > 0.7) return 'warning';
        return 'good';
      }

      function getMemoryStatusText(memoryUsage) {
        if (!memoryUsage) return 'Unable to determine memory usage';
        const parts = memoryUsage.split('/');
        if (parts.length !== 2) return 'Memory information format unknown';
        
        const used = parseFloat(parts[0]);
        const total = parseFloat(parts[1]);
        const ratio = used / total;
        
        if (ratio > 0.9) return 'Memory usage is critically high';
        if (ratio > 0.7) return 'Memory usage is high';
        return 'Memory usage is normal';
      }

      // Test SMB Connection
      document.getElementById('test-connection-btn').addEventListener('click', function() {
        const server = cleanSettingsValue(document.getElementById('smb-server').value);
        const share = cleanSettingsValue(document.getElementById('smb-share').value);
        const user = cleanSettingsValue(document.getElementById('smb-username').value);
        const password = cleanSettingsValue(document.getElementById('smb-password').value);
        
        if (!server || !share) {
          showToast('Server and share are required', 'error');
          return;
        }
        
        showToast('Testing SMB connection...', 'info');
        
        API.testConnection(server, share, user, password).then(data => {
          if (data.success) {
            showToast('SMB connection successful!', 'success');
          } else {
            showToast(`SMB connection failed: ${data.error}`, 'error');
          }
        });
      });

      // Diagnose SMB Issues
      document.getElementById('diagnose-smb-btn').addEventListener('click', function() {
        showToast('Diagnosing SMB connection issues...', 'info');
        
        // Ensure we're using clean values for diagnostics
        const server = cleanSettingsValue(document.getElementById('smb-server').value);
        const share = cleanSettingsValue(document.getElementById('smb-share').value);
        const user = cleanSettingsValue(document.getElementById('smb-username').value);
        const password = cleanSettingsValue(document.getElementById('smb-password').value);
        
        const resultsContainer = document.getElementById('smb-diagnostic-results');
        const testResults = document.getElementById('smb-test-results');
        
        resultsContainer.style.display = 'block';
        testResults.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Running diagnostics...</div>';
        
        // Use cleaned values for diagnostics
        const diagnosticSettings = {
          server: server,
          share: share,
          user: user,
          password: password
        };
        
        // Add debug info to console
        console.log('Requesting SMB diagnostics with:', {
          server: server,
          share: share,
          user: user,
          password: '********'
        });
        
        API.diagnoseSMB(diagnosticSettings).then(data => {
          if (data.success) {
            let html = `
              <div class="mb-3">
                <strong>Server:</strong> ${data.settings.server}<br>
                <strong>Share:</strong> ${data.settings.share}<br>
                <strong>User:</strong> ${data.settings.user}<br>
              </div>
            `;
            
            data.tests.forEach(test => {
              // Special handling for write_permissions test with details
              if (test.test === 'write_permissions' && test.details) {
                html += `
                  <div class="test-result ${test.success ? 'test-success' : 'test-failure'}">
                    <div class="d-flex justify-content-between align-items-center">
                      <strong>Write Permissions:</strong> ${test.message}
                      ${test.overrideWarning ? 
                        `<span class="badge bg-warning text-dark ms-2">Warning Override</span>` : ''}
                    </div>
                    
                    <div class="mt-2 mb-0 small directory-permissions">
                      <table class="table table-sm table-dark">
                        <thead>
                          <tr>
                            <th>Directory</th>
                            <th>Status</th>
                          </tr>
                        </thead>
                        <tbody>
                          ${test.details.map(dir => `
                            <tr>
                              <td>${dir.directory || 'Root'}</td>
                              <td>
                                <span class="badge ${dir.success ? 'bg-success' : 'bg-danger'}">
                                  ${dir.success ? 'Write OK' : 'No Access'}
                                </span>
                              </td>
                            </tr>
                          `).join('')}
                        </tbody>
                      </table>
                    </div>
                    
                    ${test.overrideWarning ? `
                      <div class="alert alert-warning mt-2 mb-0 py-2">
                        <i class="fas fa-info-circle me-2"></i>
                        <small>Transfers are working despite permission warnings. This suggests you have permissions on specific subdirectories but not the root.</small>
                      </div>
                    ` : ''}
                  </div>
                `;
              } else {
                html += `
                  <div class="test-result ${test.success ? 'test-success' : 'test-failure'}">
                    <strong>${test.test}:</strong> ${test.message}
                    ${test.output ? `<pre class="mt-2 mb-0 small">${test.output}</pre>` : ''}
                  </div>
                `;
              }
            });
            
            testResults.innerHTML = html;
            showToast('SMB diagnostics completed', 'success');
          } else {
            testResults.innerHTML = `
              <div class="alert alert-danger">
                <strong>Diagnostics failed:</strong> ${data.error || 'Unknown error'}<br>
                <small class="d-block mt-2">Attempted with: Server: ${server}, Share: ${share}, User: ${user}</small>
              </div>`;
            showToast('Failed to run SMB diagnostics', 'error');
          }
        }).catch(error => {
          testResults.innerHTML = `
            <div class="alert alert-danger">
              <strong>Connection error:</strong> ${error.message || 'Could not connect to server'}<br>
              <small class="d-block mt-2">Attempted with: Server: ${server}, Share: ${share}, User: ${user}</small>
              <small class="d-block mt-1">Please check server status and network connectivity.</small>
            </div>`;
          showToast('Connection error during diagnostics', 'error');
        });
      });

      // Refresh logs button
      document.getElementById('refresh-logs-btn').addEventListener('click', loadLogs);

      // Form submissions
      document.getElementById('smb-form').addEventListener('submit', function(e) {
        e.preventDefault();
        const settings = {
          SMB_SERVER: cleanSettingsValue(document.getElementById('smb-server').value),
          SMB_SHARE: cleanSettingsValue(document.getElementById('smb-share').value),
          SMB_USER: cleanSettingsValue(document.getElementById('smb-username').value),
          SMB_USERNAME: cleanSettingsValue(document.getElementById('smb-username').value), // Add both for compatibility
          SMB_PASSWORD: cleanSettingsValue(document.getElementById('smb-password').value),
          ENGLISH_MOVIE_PATH: cleanSettingsValue(document.getElementById('english-movies-path').value),
          ENGLISH_TV_PATH: cleanSettingsValue(document.getElementById('english-tv-path').value),
          MALAYALAM_MOVIE_PATH: cleanSettingsValue(document.getElementById('malayalam-movies-path').value),
          MALAYALAM_TV_PATH: cleanSettingsValue(document.getElementById('malayalam-tv-path').value)
        };
        
        showToast('Saving SMB settings...', 'info');
        API.saveSettings(settings).then(data => {
          if (data.success) {
            // Mark settings as validated and save to localStorage
            settings.validated = true;
            
            // Get existing settings and merge
            let existingSettings = localStorage.getItem('mediaProcessorSettings');
            let parsedSettings = existingSettings ? JSON.parse(existingSettings) : {};
            const updatedSettings = {...parsedSettings, ...settings};
            
            localStorage.setItem('mediaProcessorSettings', JSON.stringify(updatedSettings));
            showToast('SMB settings saved successfully', 'success');
          } else {
            showToast('Failed to save SMB settings', 'error');
          }
        });
      });

      document.getElementById('paths-form').addEventListener('submit', function(e) {
        e.preventDefault();
        const settings = {
          ENGLISH_MOVIE_PATH: cleanSettingsValue(document.getElementById('english-movies-path').value),
          ENGLISH_TV_PATH: cleanSettingsValue(document.getElementById('english-tv-path').value),
          MALAYALAM_MOVIE_PATH: cleanSettingsValue(document.getElementById('malayalam-movies-path').value),
          MALAYALAM_TV_PATH: cleanSettingsValue(document.getElementById('malayalam-tv-path').value)
        };
        
        showToast('Saving media paths...', 'info');
        API.saveSettings(settings).then(data => {
          if (data.success) {
            // Mark settings as validated and save to localStorage
            settings.validated = true;
            
            // Get existing settings and merge
            let existingSettings = localStorage.getItem('mediaProcessorSettings');
            let parsedSettings = existingSettings ? JSON.parse(existingSettings) : {};
            const updatedSettings = {...parsedSettings, ...settings};
            
            localStorage.setItem('mediaProcessorSettings', JSON.stringify(updatedSettings));
            showToast('Media paths saved successfully', 'success');
          } else {
            showToast('Failed to save media paths', 'error');
          }
        });
      });

      // Fetch and display stats from Node.js API (more accurate)
      function loadStatsAndHistory() {
        // Use Node.js stats which tracks unique successful files properly
        fetch('/api/stats')
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              console.log('Loaded stats from Node.js API:', data.stats);
              const stats = data.stats || { 
                english_movies: 0, 
                malayalam_movies: 0, 
                english_tv_shows: 0, 
                malayalam_tv_shows: 0
              };
              
              // Update stats counters with animation
              updateCounterWithAnimation('english-movies-count', stats.english_movies || 0);
              updateCounterWithAnimation('malayalam-movies-count', stats.malayalam_movies || 0);
              updateCounterWithAnimation('english-tv-count', stats.english_tv_shows || 0);
              updateCounterWithAnimation('malayalam-tv-count', stats.malayalam_tv_shows || 0);
              
              // Trigger file history load (ensures file list is updated)
              loadFileHistory();
            }
          })
          .catch(error => {
            console.error('Error loading stats from Node.js API:', error);
            // Show zero stats if API is unavailable
            updateCounterWithAnimation('english-movies-count', 0);
            updateCounterWithAnimation('malayalam-movies-count', 0);
            updateCounterWithAnimation('english-tv-count', 0);
            updateCounterWithAnimation('malayalam-tv-count', 0);
          });
      }
      
      // Helper function to animate counter updates
      function updateCounterWithAnimation(elementId, newValue) {
        const element = document.getElementById(elementId);
        if (!element) return;
        
        const currentValue = parseInt(element.textContent) || 0;
        if (currentValue === newValue) return; // No change needed
        
        // Add a highlight effect
        element.classList.add('counter-updated');
        
        // Set the new value
        element.textContent = newValue;
        
        // Remove highlight after animation completes
        setTimeout(() => {
          element.classList.remove('counter-updated');
        }, 1000);
      }

      // Add sorting functionality
      function setupTableSorting() {
        const sortableHeaders = document.querySelectorAll('.sortable');
        let currentSort = { column: null, direction: 'asc' };
        
        sortableHeaders.forEach(header => {
          header.addEventListener('click', function() {
            const column = this.dataset.sort;
            const icon = this.querySelector('i');
            
            // Reset other headers
            sortableHeaders.forEach(h => {
              if (h !== this) {
                h.querySelector('i').className = 'fas fa-sort';
              }
            });
            
            // Determine sort direction
            let direction = 'asc';
            if (currentSort.column === column) {
              direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
            }
            
            // Update icon
            icon.className = direction === 'asc' ? 'fas fa-sort-up' : 'fas fa-sort-down';
            
            // Sort the table
            sortTable(column, direction);
            
            // Update current sort
            currentSort = { column, direction };
          });
        });
      }
      
      function sortTable(column, direction) {
        const table = document.getElementById('file-history-table');
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));
        
        // Skip if no rows or only "No files" message
        if (rows.length <= 1 && rows[0].cells.length === 1) return;
        
        // Sort the rows
        const sortedRows = rows.sort((a, b) => {
          let aValue, bValue;
          
          if (column === 'type') {
            aValue = a.cells[2].textContent.replace(/^[^\w]+/, '');
            bValue = b.cells[2].textContent.replace(/^[^\w]+/, '');
          } else if (column === 'language') {
            aValue = a.cells[3].textContent.trim();
            bValue = b.cells[3].textContent.trim();
          } else if (column === 'date') {
            aValue = new Date(a.cells[4].textContent.replace(/^[^0-9]+/, '')).getTime();
            bValue = new Date(b.cells[4].textContent.replace(/^[^0-9]+/, '')).getTime();
          }
          
          if (direction === 'asc') {
            return aValue > bValue ? 1 : -1;
          } else {
            return aValue < bValue ? 1 : -1;
          }
        });
        
        // Remove existing rows
        while (tbody.firstChild) {
          tbody.removeChild(tbody.firstChild);
        }
        
        // Add sorted rows
        sortedRows.forEach(row => {
          tbody.appendChild(row);
        });
      }
      
      // Handle editable panels
      function setupEditablePanels() {
        // SMB Settings panel
        const smbForm = document.getElementById('smb-form');
        const editSmbBtn = document.getElementById('edit-smb-btn');
        const cancelSmbBtn = document.getElementById('cancel-smb-btn');
        const smbInputs = smbForm.querySelectorAll('input');
        const smbEditingActions = document.getElementById('smb-editing-actions');
        let originalSmbValues = {};
        
        editSmbBtn.addEventListener('click', function() {
          // Enable edit mode
          smbForm.classList.add('edit-mode');
          
          // Change lock icon to unlocked
          const lockIcon = editSmbBtn.querySelector('.lock-icon');
          lockIcon.classList.remove('fa-lock');
          lockIcon.classList.add('fa-lock-open');
          
          // Don't hide the button, just update its appearance
          editSmbBtn.innerHTML = '<i class="fas fa-lock-open lock-icon"></i> Editing';
          editSmbBtn.classList.add('editing');
          smbEditingActions.classList.add('active');
          
          // Store original values
          smbInputs.forEach(input => {
            originalSmbValues[input.id] = input.value;
            input.classList.remove('locked-field');
            input.removeAttribute('readonly');
          });
          
          // Add subtle highlight animation
          smbForm.style.animation = 'none';
          setTimeout(() => {
            smbForm.style.animation = 'pulse 0.6s ease';
          }, 10);
        });
        
        cancelSmbBtn.addEventListener('click', function() {
          // Disable edit mode
          smbForm.classList.remove('edit-mode');
          
          // Change lock icon back to locked
          const lockIcon = editSmbBtn.querySelector('.lock-icon');
          lockIcon.classList.remove('fa-lock-open');
          lockIcon.classList.add('fa-lock');
          
          // Reset edit button
          editSmbBtn.innerHTML = '<i class="fas fa-lock lock-icon"></i> Edit';
          editSmbBtn.classList.remove('editing');
          smbEditingActions.classList.remove('active');
          
          // Restore original values
          smbInputs.forEach(input => {
            input.value = originalSmbValues[input.id] || '';
            input.classList.add('locked-field');
            input.setAttribute('readonly', true);
          });
        });
        
        // Media Paths panel
        const pathsForm = document.getElementById('paths-form');
        const editPathsBtn = document.getElementById('edit-paths-btn');
        const cancelPathsBtn = document.getElementById('cancel-paths-btn');
        const pathsInputs = pathsForm.querySelectorAll('input');
        const pathsEditingActions = document.getElementById('paths-editing-actions');
        let originalPathsValues = {};
        
        editPathsBtn.addEventListener('click', function() {
          // Enable edit mode
          pathsForm.classList.add('edit-mode');
          
          // Change lock icon to unlocked
          const lockIcon = editPathsBtn.querySelector('.lock-icon');
          lockIcon.classList.remove('fa-lock');
          lockIcon.classList.add('fa-lock-open');
          
          // Don't hide the button, just update its appearance
          editPathsBtn.innerHTML = '<i class="fas fa-lock-open lock-icon"></i> Editing';
          editPathsBtn.classList.add('editing');
          pathsEditingActions.classList.add('active');
          
          // Store original values
          pathsInputs.forEach(input => {
            originalPathsValues[input.id] = input.value;
            input.classList.remove('locked-field');
            input.removeAttribute('readonly');
          });
          
          // Add subtle highlight animation
          pathsForm.style.animation = 'none';
          setTimeout(() => {
            pathsForm.style.animation = 'pulse 0.6s ease';
          }, 10);
        });
        
        cancelPathsBtn.addEventListener('click', function() {
          // Disable edit mode
          pathsForm.classList.remove('edit-mode');
          
          // Change lock icon back to locked
          const lockIcon = editPathsBtn.querySelector('.lock-icon');
          lockIcon.classList.remove('fa-lock-open');
          lockIcon.classList.add('fa-lock');
          
          // Reset edit button
          editPathsBtn.innerHTML = '<i class="fas fa-lock lock-icon"></i> Edit';
          editPathsBtn.classList.remove('editing');
          pathsEditingActions.classList.remove('active');
          
          // Restore original values
          pathsInputs.forEach(input => {
            input.value = originalPathsValues[input.id] || '';
            input.classList.add('locked-field');
            input.setAttribute('readonly', true);
          });
        });
        
        // Handle form submission to exit edit mode
        smbForm.addEventListener('submit', function(e) {
          // Normal save logic handled elsewhere
          setTimeout(() => {
            // Change lock icon back to locked
            const lockIcon = editSmbBtn.querySelector('.lock-icon');
            lockIcon.classList.remove('fa-lock-open');
            lockIcon.classList.add('fa-lock');
            
            // Reset edit button
            editSmbBtn.innerHTML = '<i class="fas fa-lock lock-icon"></i> Edit';
            editSmbBtn.classList.remove('editing');
            smbForm.classList.remove('edit-mode');
            smbEditingActions.classList.remove('active');
            
            smbInputs.forEach(input => {
              input.classList.add('locked-field');
              input.setAttribute('readonly', true);
            });
          }, 500);
        });
        
        pathsForm.addEventListener('submit', function(e) {
          // Normal save logic handled elsewhere
          setTimeout(() => {
            // Change lock icon back to locked
            const lockIcon = editPathsBtn.querySelector('.lock-icon');
            lockIcon.classList.remove('fa-lock-open');
            lockIcon.classList.add('fa-lock');
            
            // Reset edit button
            editPathsBtn.innerHTML = '<i class="fas fa-lock lock-icon"></i> Edit';
            editPathsBtn.classList.remove('editing');
            pathsForm.classList.remove('edit-mode');
            pathsEditingActions.classList.remove('active');
            
            pathsInputs.forEach(input => {
              input.classList.add('locked-field');
              input.setAttribute('readonly', true);
            });
          }, 500);
        });
      }

      // Admin Panel Setup
      function setupAdminPanel() {
        // Pattern tester
        document.getElementById('test-patterns').addEventListener('click', function() {
          const filename = document.getElementById('test-filename').value;
          if (!filename) {
            showToast('Please enter a filename to test', 'warning');
            return;
          }
          
          const resultsDiv = document.getElementById('test-results');
          
          // Simulate pattern testing (in a real implementation, this would call the backend)
          let result = `<div class="alert alert-info">
            <h6>Test Results for: <code>${filename}</code></h6>
            <hr>`;
          
          // Test website cleaning patterns
          let cleaned = filename;
          const websitePatterns = [
            /^www\.\d*TamilMV\.[a-z]+\s*-\s*/i,
            /^www\s+\d*TamilMV\s+[a-z]+\s*-\s*/i,
            /^www\.\w+\s*-\s*/i
          ];
          
          websitePatterns.forEach((pattern, index) => {
            if (pattern.test(cleaned)) {
              const beforeClean = cleaned;
              cleaned = cleaned.replace(pattern, '');
              result += `<small><strong>Pattern ${index + 1}:</strong> <code>${pattern}</code><br>
                         <span class="text-muted">Before:</span> ${beforeClean}<br>
                         <span class="text-success">After:</span> ${cleaned}<br><br></small>`;
            }
          });
          
          // Test TV show pattern
          const tvPattern = /^(.*?)\s+[Ss](\d+)[Ee](\d+)\s+.*$/i;
          const match = cleaned.match(tvPattern);
          if (match) {
            result += `<strong>TV Show Detection:</strong><br>
                       <span class="text-info">Series:</span> ${match[1]}<br>
                       <span class="text-info">Season:</span> ${match[2]}<br>
                       <span class="text-info">Episode:</span> ${match[3]}<br>`;
          } else {
            result += `<span class="text-warning">No TV show pattern matched</span>`;
          }
          
          result += `</div>`;
          resultsDiv.innerHTML = result;
        });
        
        // Pattern management
        document.getElementById('add-website-pattern').addEventListener('click', function() {
          const pattern = document.getElementById('website-pattern').value;
          if (!pattern) {
            showToast('Please enter a regex pattern', 'warning');
            return;
          }
          
          try {
            // Test if it's a valid regex
            new RegExp(pattern);
            
            // Add to list (in a real implementation, this would save to backend)
            const listDiv = document.getElementById('website-patterns-list');
            const newItem = document.createElement('div');
            newItem.className = 'list-group-item d-flex justify-content-between align-items-center';
            newItem.innerHTML = `
              <code>${pattern}</code>
              <div>
                <span class="badge bg-success me-2">Custom</span>
                <button class="btn btn-sm btn-outline-danger" onclick="this.parentElement.parentElement.remove()">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            `;
            listDiv.appendChild(newItem);
            
            document.getElementById('website-pattern').value = '';
            showToast('Pattern added successfully', 'success');
          } catch (e) {
            showToast('Invalid regex pattern', 'error');
          }
        });
        
        document.getElementById('add-tv-pattern').addEventListener('click', function() {
          const pattern = document.getElementById('tv-pattern').value;
          if (!pattern) {
            showToast('Please enter a regex pattern', 'warning');
            return;
          }
          
          try {
            // Test if it's a valid regex
            new RegExp(pattern);
            
            // Add to list
            const listDiv = document.getElementById('tv-patterns-list');
            const newItem = document.createElement('div');
            newItem.className = 'list-group-item d-flex justify-content-between align-items-center';
            newItem.innerHTML = `
              <code>${pattern}</code>
              <div>
                <span class="badge bg-success me-2">Custom</span>
                <button class="btn btn-sm btn-outline-danger" onclick="this.parentElement.parentElement.remove()">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            `;
            listDiv.appendChild(newItem);
            
            document.getElementById('tv-pattern').value = '';
            showToast('TV pattern added successfully', 'success');
          } catch (e) {
            showToast('Invalid regex pattern', 'error');
          }
        });
        
        // Pattern management buttons
        document.getElementById('backup-patterns').addEventListener('click', function() {
          const patterns = {
            website: Array.from(document.querySelectorAll('#website-patterns-list code')).map(el => el.textContent),
            tv: Array.from(document.querySelectorAll('#tv-patterns-list code')).map(el => el.textContent),
            timestamp: new Date().toISOString()
          };
          
          const blob = new Blob([JSON.stringify(patterns, null, 2)], { type: 'application/json' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `media-processor-patterns-${new Date().toISOString().split('T')[0]}.json`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
          
          showToast('Patterns backed up successfully', 'success');
        });
        
        document.getElementById('restore-patterns').addEventListener('click', function() {
          document.getElementById('pattern-file-input').click();
        });
        
        document.getElementById('pattern-file-input').addEventListener('change', function(e) {
          const file = e.target.files[0];
          if (!file) return;
          
          const reader = new FileReader();
          reader.onload = function(e) {
            try {
              const patterns = JSON.parse(e.target.result);
              
              if (patterns.website || patterns.tv) {
                // In a real implementation, this would send to backend
                showToast('Pattern restore functionality would be implemented here', 'info');
              } else {
                showToast('Invalid pattern file format', 'error');
              }
            } catch (err) {
              showToast('Error reading pattern file', 'error');
            }
          };
          reader.readAsText(file);
        });
        
        document.getElementById('reset-patterns').addEventListener('click', function() {
          if (confirm('Are you sure you want to reset all patterns to default? This will remove all custom patterns.')) {
            // In a real implementation, this would reset patterns in backend
            showToast('Pattern reset functionality would be implemented here', 'warning');
          }
        });
        
        document.getElementById('restart-service').addEventListener('click', function() {
          if (confirm('Are you sure you want to restart the media processor service?')) {
            showToast('Restarting media processor service...', 'info');
            
            fetch('http://127.0.0.1:5001/api/service/restart', { method: 'POST' })
              .then(res => res.json())
              .then(data => {
                if (data.success) {
                  showToast('Service restarted successfully', 'success');
                } else {
                  showToast('Failed to restart service: ' + (data.error || 'Unknown error'), 'error');
                }
              })
              .catch(error => {
                showToast('Error restarting service: ' + error.message, 'error');
              });
          }
        });
      }

      // Initialize
      loadSettings();
      loadLogs();
      loadStatsAndHistory();
      setupTableSorting();
      setupEditablePanels();
      startTypewriterAnimation();
      setupStickyHeader();
      setupAdminPanel();

      // Periodically refresh stats and file history every 30 seconds
      setInterval(loadStatsAndHistory, 30000);
      
      // Sticky header with scroll effects
      function setupStickyHeader() {
        const header = document.querySelector('.header');
        let lastScrollY = window.scrollY;
        
        window.addEventListener('scroll', () => {
          const currentScrollY = window.scrollY;
          
          if (currentScrollY > 100) {
            header.classList.add('scrolled', 'header-compact');
          } else {
            header.classList.remove('scrolled', 'header-compact');
          }
          
          // Hide header on scroll down, show on scroll up
          if (currentScrollY > lastScrollY && currentScrollY > 200) {
            header.style.transform = 'translateY(-100%)';
          } else {
            header.style.transform = 'translateY(0)';
          }
          
          lastScrollY = currentScrollY;
        });
      }
      
      // Enhanced typewriter animation with multiple phrases
      function startTypewriterAnimation() {
        const phrases = [
          "✨ Your Smart Media Shelf ✨",
          "🤖 Automatically organize your collection",
          "📂 Sort movies and TV shows perfectly",
          "🎬 Malayalam and English content",
          "🚀 Your media, your rules",
          "🎞️ Intelligent file processing",
          "📺 Clean up and categorize everything",
          "🍿 Enjoy your organized library"
        ];
        
        const typewriterElement = document.getElementById('typewriter-text');
        let currentPhraseIndex = 0;
        let currentCharIndex = 0;
        let isDeleting = false;
        let typingSpeed = 100;
        
        function typeWriter() {
          const currentPhrase = phrases[currentPhraseIndex];
          
          if (!isDeleting) {
            // Typing
            typewriterElement.innerHTML = currentPhrase.substring(0, currentCharIndex + 1) + '<span class="typewriter-cursor">|</span>';
            currentCharIndex++;
            
            if (currentCharIndex === currentPhrase.length) {
              // Finished typing, wait then start deleting
              setTimeout(() => {
                isDeleting = true;
                typingSpeed = 50;
              }, 2000);
            }
          } else {
            // Deleting
            typewriterElement.innerHTML = currentPhrase.substring(0, currentCharIndex - 1) + '<span class="typewriter-cursor">|</span>';
            currentCharIndex--;
            
            if (currentCharIndex === 0) {
              // Finished deleting, move to next phrase
              isDeleting = false;
              currentPhraseIndex = (currentPhraseIndex + 1) % phrases.length;
              typingSpeed = 100;
              // Small pause before starting next phrase
              setTimeout(typeWriter, 500);
              return;
            }
          }
          
          setTimeout(typeWriter, typingSpeed);
        }
        
        // Start the animation
        typeWriter();
      }

      // Additional fix for initial load - completely reset fields if corrupted
      setTimeout(() => {
        // Check for concatenation in server field after initial load
        const serverField = document.getElementById('smb-server');
        if (serverField && serverField.value.includes('Data-Streamwave')) {
          console.log('Detected concatenated server value, fixing...');
          serverField.value = 'streamwave.local';
          
          // Force save to localStorage to prevent future issues
          const settings = {
            SMB_SERVER: 'streamwave.local',
            SMB_SHARE: document.getElementById('smb-share').value,
            SMB_USER: document.getElementById('smb-username').value,
            SMB_PASSWORD: document.getElementById('smb-password').value,
            validated: true
          };
          
          // Update localStorage
          let existingSettings = localStorage.getItem('mediaProcessorSettings');
          let parsedSettings = existingSettings ? JSON.parse(existingSettings) : {};
          const updatedSettings = {...parsedSettings, ...settings};
          localStorage.setItem('mediaProcessorSettings', JSON.stringify(updatedSettings));
        }
      }, 1000); // Check after everything is loaded
    });

    // Completely rewrite the file history functionality with a simpler approach
    function createFileHistorySection() {
      console.log('Creating file history section');
      
      // First, check if the section already exists and is properly formed
      const existingSection = document.getElementById('file-history-section');
      if (existingSection) {
        // Check if it contains all necessary children
        const hasTable = existingSection.querySelector('#file-history-table-body');
        const hasRefreshButton = existingSection.querySelector('#refresh-history');
        
        // If it's already properly formed, just return without creating a duplicate
        if (hasTable && hasRefreshButton) {
          console.log('File history section already exists and is properly formed');
          return existingSection;
        }
        
        // Otherwise, remove the malformed section
        console.log('Removing malformed file history section');
        existingSection.remove();
      }
      
      // Also remove any other sections with related class names to avoid duplicates
      const relatedSections = document.querySelectorAll('[class*="file-history"], .row.mt-4:has(#file-history-table-body)');
      relatedSections.forEach(section => {
        if (section.id !== 'file-history-section') {
          console.log('Removing related file history section', section);
          section.remove();
        }
      });
      
      // Very specific placement targeting - find the media stats row (with the 4 media type counters)
      // and the status card that follows it
      const mediaStatsRow = document.querySelector('.row.mb-4:has(.stats-card)');
      const statusCard = document.querySelector('.card.mb-4:has(#status-badge)');
      
      // Make sure we have both elements for precise placement
      if (mediaStatsRow && statusCard) {
        console.log('Found exact placement points');
        const fileHistorySection = createFileHistoryElement();
        
        // Insert before the status card (after media stats)
        statusCard.parentNode.insertBefore(fileHistorySection, statusCard);
        
        // Add event listeners
        const refreshButton = fileHistorySection.querySelector('#refresh-history');
        if (refreshButton) {
          refreshButton.addEventListener('click', loadFileHistory);
        }
        
        const retryButton = fileHistorySection.querySelector('#retry-history');
        if (retryButton) {
          retryButton.addEventListener('click', loadFileHistory);
        }
        
        return fileHistorySection;
      } else {
        console.error('Could not find precise placement points, falling back to container');
        
        // Fallback to container
        const container = document.querySelector('.container');
        if (!container) {
          console.error('Could not find container for file history section');
          return null;
        }
        
        const fileHistorySection = createFileHistoryElement();
        
        // If we at least have the media stats row, insert after it
        if (mediaStatsRow) {
          mediaStatsRow.insertAdjacentElement('afterend', fileHistorySection);
        } else {
          // Otherwise insert at the beginning of the container
          container.prepend(fileHistorySection);
        }
        
        // Add event listeners
        const refreshButton = fileHistorySection.querySelector('#refresh-history');
        if (refreshButton) {
          refreshButton.addEventListener('click', loadFileHistory);
        }
        
        const retryButton = fileHistorySection.querySelector('#retry-history');
        if (retryButton) {
          retryButton.addEventListener('click', loadFileHistory);
        }
        
        return fileHistorySection;
      }
    }
    
    // Helper function to create the file history element
    function createFileHistoryElement() {
      const fileHistorySection = document.createElement('div');
      fileHistorySection.id = 'file-history-section';
      fileHistorySection.className = 'row mt-4 mb-4'; // More compact spacing
      fileHistorySection.innerHTML = `
        <div class="col-12">
          <div class="card shadow-sm">
            <div class="card-header d-flex justify-content-between align-items-center" style="background-color: var(--primary-color, #3a3af0); color: white;">
              <h5 class="mb-0"><i class="fas fa-history me-2"></i>Recent Media Files</h5>
              <button id="refresh-history" class="btn btn-sm btn-outline-light">
                <i class="fas fa-sync-alt me-1"></i> Refresh
              </button>
            </div>
            <div class="card-body p-0"> <!-- Remove padding for more compact layout -->
              <div id="file-history-container">
                <!-- Loading state -->
                <div class="text-center py-3" id="file-history-loading">
                  <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                  <p class="mt-2">Loading file history...</p>
                </div>
                
                <!-- Error state -->
                <div class="d-none" id="file-history-error">
                  <div class="alert alert-danger m-3">
                    <p><i class="fas fa-exclamation-triangle me-2"></i> Error loading file history</p>
                    <button id="retry-history" class="btn btn-sm btn-danger">Retry</button>
                  </div>
                </div>
                
                <!-- Empty state -->
                <div class="d-none" id="file-history-empty">
                  <div class="text-center py-4">
                    <i class="fas fa-file-video fa-4x text-muted mb-3"></i>
                    <p class="lead">No processed files yet</p>
                    <p class="text-muted">Files will appear here after processing</p>
                  </div>
                </div>
                
                <!-- Table container -->
                <div class="file-history-container d-none" id="file-history-table-container">
                  <table class="table table-striped table-hover file-history-table" id="file-history-table">
                    <thead class="file-history-header">
                      <tr>
                        <th>📽️ Media File</th>
                        <th width="80">🎬 Type</th>
                        <th width="100">🌐 Language</th>
                        <th width="80">📊 Status</th>
                        <th width="200">📁 Moved To</th>
                        <th width="120">⏰ Processed</th>
                      </tr>
                    </thead>
                    <tbody id="file-history-table-body"></tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Add event listener for the refresh button
      setTimeout(() => {
        const refreshBtn = fileHistorySection.querySelector('#refresh-history');
        if (refreshBtn) {
          refreshBtn.addEventListener('click', function() {
            loadFileHistory();
          });
        }
      }, 100);
      
      return fileHistorySection;
    }

    // Function to format dates in a more compact way
    function formatDate(dateString) {
      try {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffMin = Math.floor(diffMs / 60000);
        const diffHours = Math.floor(diffMs / 3600000);
        const diffDays = Math.floor(diffMs / 86400000);
        
        if (diffMin < 60) {
          return `${diffMin}m ago`;
        } else if (diffHours < 24) {
          return `${diffHours}h ago`;
        } else if (diffDays < 7) {
          return `${diffDays}d ago`;
        } else {
          return date.toLocaleDateString();
        }
      } catch (error) {
        return dateString;
      }
    }

    // Enhanced file row creation function using backend enhanced data
    function createFileRow(file) {
      const row = document.createElement('tr');
      row.className = 'file-history-row';
      
      // Name cell with enhanced emojis from backend
      const nameCell = document.createElement('td');
      nameCell.className = 'file-name-cell file-history-cell';
      
      // Use enhanced emojis and display name from backend
      const typeEmoji = file.typeEmoji || '🎬';
      const langEmoji = file.langEmoji || '🌐';
      const statusEmoji = file.statusEmoji || '⏳';
      const displayName = file.displayName || file.name || 'Unknown file';
      
      // Create enhanced display with multiple emojis and animations
      nameCell.innerHTML = `
        <div class="file-name-display">
          <span class="file-icon-group">
            <span class="file-type-icon">${typeEmoji}</span>
            <span class="file-lang-icon">${langEmoji}</span>
            <span class="file-status-icon">${statusEmoji}</span>
          </span>
          <span class="file-display-name">${displayName}</span>
          <span class="file-size-info">${file.size || ''}</span>
        </div>
      `;
      row.appendChild(nameCell);
      
      // Type cell with enhanced styling
      const typeCell = document.createElement('td');
      typeCell.className = 'file-history-cell text-center';
      const isMovie = file.type && file.type.toLowerCase() === 'movie';
      const typeBadgeClass = isMovie ? 'bg-gradient bg-primary' : 'bg-gradient bg-success';
      typeCell.innerHTML = `<span class="file-badge ${typeBadgeClass} text-white">${typeEmoji} ${file.type ? file.type.toUpperCase() : 'UNKNOWN'}</span>`;
      row.appendChild(typeCell);
      
      // Language cell with enhanced styling
      const langCell = document.createElement('td');
      langCell.className = 'file-history-cell text-center';
      const langBadgeClass = file.language === 'english' ? 'bg-info' : file.language === 'malayalam' ? 'bg-warning' : 'bg-secondary';
      langCell.innerHTML = `<span class="file-badge ${langBadgeClass} text-dark">${langEmoji} ${(file.language || 'unknown').toUpperCase()}</span>`;
      row.appendChild(langCell);
      
      // Status cell with enhanced status display
      const statusCell = document.createElement('td');
      statusCell.className = 'file-history-cell text-center';
      const statusBadgeClass = file.status === 'success' ? 'bg-success' : 
                             file.status === 'failed' ? 'bg-danger' : 
                             file.status === 'processing' ? 'bg-primary' : 'bg-secondary';
      statusCell.innerHTML = `<span class="file-badge ${statusBadgeClass} text-white">${statusEmoji} ${(file.status || 'unknown').toUpperCase()}</span>`;
      row.appendChild(statusCell);
      
      // Path cell showing where file was moved - make it clickable
      const pathCell = document.createElement('td');
      pathCell.className = 'file-history-cell file-path';
      const fullPath = file.path || 'N/A';
      
      // Create clickable path element with proper styling
      const pathElement = document.createElement('small');
      pathElement.className = 'text-muted clickable-path';
      pathElement.setAttribute('data-path', fullPath);
      pathElement.innerHTML = `<i class="fas fa-folder-open me-2"></i><span class="path-text">${fullPath}</span>`;
      pathElement.title = 'Click to open folder: ' + fullPath;
      
      // Add click handler to open file location
      if (file.path && file.path !== 'N/A' && file.path !== '' && !file.path.includes('Extraction Error')) {
        pathElement.style.cursor = 'pointer';
        pathElement.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          
          console.log('📂 Attempting to open file location:', file.path);
          
          fetch('/api/open-location', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ filePath: file.path })
          })
          .then(response => {
            console.log('📂 Response status:', response.status);
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            console.log('📂 Response data:', data);
            if (data.success) {
              if (typeof showToast === 'function') {
                showToast('📂 File location opened successfully!', 'success');
              } else {
                console.log('📂 File location opened successfully!');
              }
            } else {
              console.error('❌ Server error:', data.error);
              if (typeof showToast === 'function') {
                showToast(`❌ ${data.error || 'Could not open file location'}`, 'error');
              } else {
                console.error('❌ Could not open file location:', data.error);
              }
            }
          })
          .catch(error => {
            console.error('❌ Fetch error:', error);
            if (typeof showToast === 'function') {
              showToast(`❌ Error: ${error.message}`, 'error');
            } else {
              console.error('❌ Error opening file location:', error.message);
            }
          });
        });
      } else {
        pathElement.style.cursor = 'not-allowed';
        pathElement.style.opacity = '0.5';
        pathElement.title = 'File location not available';
        pathElement.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          if (typeof showToast === 'function') {
            showToast('ℹ️ File location not available for this entry', 'info');
          } else {
            console.log('ℹ️ File location not available for this entry');
          }
        });
      }
      
      pathCell.appendChild(pathElement);
      row.appendChild(pathCell);
      
      // Processed At cell
      const dateCell = document.createElement('td');
      dateCell.className = 'file-history-cell text-end file-date';
      dateCell.textContent = formatDate(file.timestamp || file.processedAt);
      row.appendChild(dateCell);
      
      return row;
    }

    // Update the file history loading function to use the new row creation
    function loadFileHistory() {
      console.log('Loading file history data...');
      
      // Show loading, hide other states
      let loadingEl = document.getElementById('file-history-loading');
      let errorEl = document.getElementById('file-history-error');
      let emptyEl = document.getElementById('file-history-empty');
      let tableContainerEl = document.getElementById('file-history-table-container');
      
      if (!loadingEl || !errorEl || !emptyEl || !tableContainerEl) {
        console.error('File history elements not found, creating a new section');
        createFileHistorySection();
        
        // Try to get elements again
        loadingEl = document.getElementById('file-history-loading');
        errorEl = document.getElementById('file-history-error');
        emptyEl = document.getElementById('file-history-empty');
        tableContainerEl = document.getElementById('file-history-table-container');
        
        if (!loadingEl || !errorEl || !emptyEl || !tableContainerEl) {
          console.error('Failed to create file history section with proper elements');
          return;
        }
      }
      
      // Reset visibility
      loadingEl.classList.remove('d-none');
      errorEl.classList.add('d-none');
      emptyEl.classList.add('d-none');
      tableContainerEl.classList.add('d-none');
      
      // Fetch the file history data
      fetch('/api/file-history')
        .then(response => {
          if (!response.ok) {
            throw new Error(`Server returned ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          console.log('Received file history data:', data);
          
          // Hide loading state
          loadingEl.classList.add('d-none');
          
          if (!data.success) {
            // Show error state if API reports failure
            errorEl.classList.remove('d-none');
            return;
          }
          
          // Check if we have files to display
          const files = data.history || [];
          
          if (!files || files.length === 0) {
            // Show empty state
            emptyEl.classList.remove('d-none');
            return;
          }
          
          // Get the table body
          const tableBody = document.getElementById('file-history-table-body');
          if (!tableBody) {
            console.error('File history table body not found');
            errorEl.classList.remove('d-none');
            return;
          }
          
          // Clear the table
          tableBody.innerHTML = '';
          
          // Add file rows
          files.slice(0, 20).forEach(file => {
            // Check if file has required properties
            if (!file.type) {
              // Skip invalid entries
              console.warn('Skipping invalid file entry:', file);
              return;
            }
            
            // Make sure file has a name property
            if (!file.name && file.processedAt) {
              file.name = `Media processed at ${new Date(file.processedAt).toLocaleString()}`;
            }
            
            const row = createFileRow(file);
            tableBody.appendChild(row);
          });
          
          // Show the table
          tableContainerEl.classList.remove('d-none');
        })
        .catch(error => {
          console.error('Error loading file history:', error);
          
          // Hide loading, show error
          loadingEl.classList.add('d-none');
          errorEl.classList.remove('d-none');
          
          // Set error message
          const errorMsgEl = errorEl.querySelector('p');
          if (errorMsgEl) {
            errorMsgEl.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i> Error: ${error.message || 'Failed to load file history'}`;
          }
        });
    }

    // Initialize file history on page load - consolidated version
    document.addEventListener('DOMContentLoaded', () => {
      // Create file history section only once with a short delay to ensure DOM is ready
      setTimeout(() => {
        // First, remove any misplaced sections that might be in the wrong position
        const existingSections = document.querySelectorAll('#file-history-section');
        existingSections.forEach(section => section.remove());
        
        console.log('Initializing file history section on DOMContentLoaded');
        const section = createFileHistorySection();
        if (section) {
          // Load the initial data
          setTimeout(loadFileHistory, 500);
        }
      }, 1000);
    });

    // Setup a limited MutationObserver to watch for DOM changes only where needed
    const observer = new MutationObserver((mutations) => {
      // Only check for file history section if we have actual DOM modifications
      const mainContentMutations = mutations.filter(mutation => 
        mutation.type === 'childList' && 
        (mutation.target.id === 'main-content' || 
         mutation.target.className === 'container' ||
         mutation.target.tagName === 'BODY')
      );
      
      if (mainContentMutations.length > 0) {
        // Avoid excessive recreations by using a timestamp check
        if (!window.lastFileHistoryCreationAttempt || 
            (Date.now() - window.lastFileHistoryCreationAttempt > 10000)) {
          
          // Check if file history section exists
          const fileHistorySection = document.getElementById('file-history-section');
          
          // Check if we have the required elements for proper placement
          const mediaStatsRow = document.querySelector('.row.mb-4:has(.stats-card)');
          const statusCard = document.querySelector('.card.mb-4:has(#status-badge)');
          
          // If section exists but is in the wrong place, remove it
          if (fileHistorySection && mediaStatsRow && statusCard) {
            // Check if it's correctly positioned between the media stats and status card
            const correctPosition = fileHistorySection.previousElementSibling === mediaStatsRow && 
                                    fileHistorySection.nextElementSibling === statusCard;
            
            if (!correctPosition) {
              console.log('File history section exists but in wrong position, removing it');
              fileHistorySection.remove();
            } else {
              console.log('File history section is in the correct position');
            }
          }
          
          // If it doesn't exist or we just removed it, create a new one
          if (!document.getElementById('file-history-section')) {
            console.log('File history section not found, creating via MutationObserver');
            window.lastFileHistoryCreationAttempt = Date.now();
            createFileHistorySection();
            setTimeout(loadFileHistory, 500);
          }
        }
      }
    });

    // Start observing with a more focused approach
    const mainContent = document.querySelector('.container') || document.body;
    observer.observe(mainContent, { childList: true, subtree: true });

    // Setup a lightweight interval check - only run every 60 seconds 
    window.fileHistoryCheckInterval = setInterval(() => {
      // Avoid excessive recreations by using a timestamp check
      if (!window.lastFileHistoryCreationAttempt || 
          (Date.now() - window.lastFileHistoryCreationAttempt > 30000)) {
        
        // Check if file history section exists
        const fileHistorySection = document.getElementById('file-history-section');
        
        // Check if we have the required elements for proper placement
        const mediaStatsRow = document.querySelector('.row.mb-4:has(.stats-card)');
        const statusCard = document.querySelector('.card.mb-4:has(#status-badge)');
        
        // If section exists but is in the wrong place, remove it
        if (fileHistorySection && mediaStatsRow && statusCard) {
          // Check if it's correctly positioned between the media stats and status card
          const correctPosition = fileHistorySection.previousElementSibling === mediaStatsRow && 
                                  fileHistorySection.nextElementSibling === statusCard;
          
          if (!correctPosition) {
            console.log('File history section exists but in wrong position, removing it');
            fileHistorySection.remove();
          } else {
            console.log('File history section is in the correct position');
          }
        }
        
        // If it doesn't exist or we just removed it, create a new one
        if (!document.getElementById('file-history-section')) {
          console.log('File history section not found during periodic check, recreating');
          window.lastFileHistoryCreationAttempt = Date.now();
          createFileHistorySection();
          setTimeout(loadFileHistory, 500);
        }
      }
    }, 60000); // Check every 60 seconds

    // Function to test SMB connection
    function testSmbConnection() {
      // Get the button and show loading state
      const testBtn = document.getElementById('test-connection-btn');
      if (!testBtn) return;
      
      const originalBtnText = testBtn.innerHTML;
      testBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Testing...';
      testBtn.disabled = true;
      
      // Get values from form
      const server = document.getElementById('smb-server').value;
      const share = document.getElementById('smb-share').value;
      const user = document.getElementById('smb-username').value;
      const password = document.getElementById('smb-password').value;
      
      // Show toast notification
      document.getElementById('smb-test-toast-title').textContent = 'Testing SMB connection...';
      document.getElementById('smb-test-toast-body').innerHTML = 'Connecting to <strong>' + server + '</strong>...';
      const toastEl = document.getElementById('smb-test-toast');
      const toast = new bootstrap.Toast(toastEl);
      toast.show();
      
      // Show alert
      const successAlert = document.getElementById('smb-test-success');
      const failureAlert = document.getElementById('smb-test-failure');
      successAlert.classList.add('d-none');
      failureAlert.classList.add('d-none');
      
      // Make API request with values from form
      fetch('/api/test-connection', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          server,
          share, 
          user,
          password
        })
      })
      .then(response => response.json())
      .then(data => {
        console.log('Connection test result:', data);
        
        // Update toast
        if (data.success) {
          document.getElementById('smb-test-toast-title').textContent = '✅ Connection Successful';
          document.getElementById('smb-test-toast-body').innerHTML = 'Successfully connected to <strong>' + server + '</strong>';
          successAlert.classList.remove('d-none');
          failureAlert.classList.add('d-none');
        } else {
          document.getElementById('smb-test-toast-title').textContent = '❌ Connection Failed';
          
          let errorMessage = data.message || 'Could not connect to the SMB server';
          let detailsMessage = '';
          
          // Add helpful diagnostics
          if (data.anonymousWorks) {
            detailsMessage += '<div class="alert alert-warning mt-2 mb-0"><strong>Note:</strong> Anonymous connection works, but authentication failed. Double-check your username and password.</div>';
          }
          
          if (data.details) {
            if (data.details.includes('NT_STATUS_LOGON_FAILURE')) {
              errorMessage = 'Authentication failed: Username or password incorrect';
            } else if (data.details.includes('Connection refused')) {
              errorMessage = 'Connection refused: Server may be offline or blocking connections';
            } else if (data.details.includes('No route to host')) {
              errorMessage = 'No route to host: Check network connectivity and firewall settings';
            } else if (data.details.includes('Name or service not known')) {
              errorMessage = 'Server name could not be resolved: Check hostname';
            }
          }
          
          document.getElementById('smb-test-toast-body').innerHTML = errorMessage + detailsMessage;
          successAlert.classList.add('d-none');
          failureAlert.classList.remove('d-none');
          failureAlert.innerHTML = '<strong>Connection Failed:</strong> ' + errorMessage;
        }
      })
      .catch(error => {
        console.error('Error testing connection:', error);
        document.getElementById('smb-test-toast-title').textContent = '❌ Error';
        document.getElementById('smb-test-toast-body').textContent = 'An error occurred while testing the connection: ' + (error.message || 'Unknown error');
        
        successAlert.classList.add('d-none');
        failureAlert.classList.remove('d-none');
        failureAlert.innerHTML = '<strong>Error:</strong> ' + (error.message || 'Unknown error');
      })
      .finally(() => {
        // Reset button
        testBtn.innerHTML = originalBtnText;
        testBtn.disabled = false;
      });
    }

    // Function to diagnose SMB connection
    function diagnoseSmbConnection() {
      // Get the button and show loading state
      const diagBtn = document.getElementById('diagnose-smb-btn');
      const originalBtnText = diagBtn.innerHTML;
      diagBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Diagnosing...';
      diagBtn.disabled = true;
      
      // Get values from form
      const server = document.getElementById('smb-server').value;
      const share = document.getElementById('smb-share').value;
      const user = document.getElementById('smb-username').value;
      const password = document.getElementById('smb-password').value;
      
      // Clear previous results
      document.getElementById('smb-diagnostics-results').innerHTML = '<div class="text-center"><span class="spinner-border" role="status"></span><p class="mt-2">Running diagnostics...</p></div>';
      
      // Make API request
      fetch('/api/diagnose-smb', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          server,
          share, 
          user,
          password
        })
      })
      .then(response => response.json())
      .then(data => {
        // Reset button
        diagBtn.innerHTML = originalBtnText;
        diagBtn.disabled = false;
        
        if (data.success) {
          const resultsEl = document.getElementById('smb-diagnostics-results');
          
          // Build a nice UI with the diagnostics results
          let html = `
            <div class="mb-3">
              <h4>SMB Connection Diagnostics</h4>
              <div class="mb-3">
                <strong>Server:</strong> ${server}<br>
                <strong>Share:</strong> ${share}<br>
                <strong>User:</strong> ${user}
              </div>
          `;
          
          // Add the diagnostic message if available
          if (data.diagnosticMessage) {
            html += `<div class="alert alert-info">${data.diagnosticMessage}</div>`;
          }
          
          // Add suggestions if available
          if (data.fixSuggestions && data.fixSuggestions.length > 0) {
            html += `
              <div class="card mb-3">
                <div class="card-header bg-warning text-dark">
                  <i class="fas fa-lightbulb me-2"></i> Suggestions
                </div>
                <div class="card-body">
                  <ul class="mb-0">
            `;
            
            data.fixSuggestions.forEach(suggestion => {
              html += `<li>${suggestion}</li>`;
            });
            
            html += `
                  </ul>
                </div>
              </div>
            `;
          }
          
          // Add the test results in order
          data.tests.forEach(test => {
            const statusClass = test.success ? 'success' : 'danger';
            const statusIcon = test.emoji || (test.success ? '✅' : '❌');
            
            html += `
              <div class="card mb-2 border-${statusClass}">
                <div class="card-header bg-${statusClass} ${test.success ? 'text-dark' : 'text-white'}">
                  ${statusIcon} ${test.test}: ${test.message}
                </div>
            `;
            
            // Add the output if available
            if (test.output && test.output.trim()) {
              html += `
                <div class="card-body">
                  <pre class="mb-0 diagnostics-output">${test.output}</pre>
                </div>
              `;
            }
            
            html += `</div>`;
          });
          
          html += `</div>`;
          resultsEl.innerHTML = html;
          
          // Update the UI with an appropriate alert
          const allPassed = data.tests.every(test => test.success);
          const failureAlert = document.getElementById('smb-test-failure');
          
          if (failureAlert) {
            if (allPassed) {
              failureAlert.classList.add('d-none');
            } else {
              failureAlert.classList.remove('d-none');
              const firstFailure = data.tests.find(test => !test.success);
              failureAlert.innerHTML = `<strong>SMB connection failed:</strong> ${firstFailure ? firstFailure.message : 'Unknown error'}`;
            }
          }
        } else {
          console.error('Error running diagnostics:', data.error);
          document.getElementById('smb-diagnostics-results').innerHTML = `<div class="alert alert-danger">Error running diagnostics: ${data.error || 'Unknown error'}</div>`;
        }
      })
      .catch(error => {
        console.error('Error running diagnostics:', error);
        diagBtn.innerHTML = originalBtnText;
        diagBtn.disabled = false;
        document.getElementById('smb-diagnostics-results').innerHTML = `<div class="alert alert-danger">Error running diagnostics: ${error.message || 'Unknown error'}</div>`;
      });
    }
  </script>
</body>
</html>
